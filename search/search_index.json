{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Paparazzi \u00b6 An Android library to render your application screens without a physical device or emulator. class LaunchViewTest { @get : Rule val paparazzi = Paparazzi ( deviceConfig = PIXEL_5 , theme = \"android:Theme.Material.Light.NoActionBar\" // ...see docs for more options ) @Test fun simple () { val view = paparazzi . inflate < LaunchView >( R . layout . launch ) // or... // val view = LaunchView(paparazzi.context) view . setModel ( LaunchModel ( title = \"paparazzi\" )) paparazzi . snapshot ( view ) } } Tasks \u00b6 $ ./gradlew sample:testDebug Runs tests and generates an HTML report at sample/build/reports/paparazzi/ showing all test runs and snapshots. $ ./gradlew sample:recordPaparazziDebug Saves snapshots as golden values to a predefined source-controlled location (defaults to src/test/snapshots ). $ ./gradlew sample:verifyPaparazziDebug Runs tests and verifies against previously-recorded golden values. For more examples, check out the sample project. Git LFS \u00b6 It is recommended you use Git LFS to store your snapshots. Here\u2019s a quick setup: $ brew install git-lfs $ git config core.hooksPath # optional, confirm where your git hooks will be installed $ git lfs install --local $ git lfs track **/snapshots/**/*.png $ git add .gitattributes On CI, you might set up something like: $HOOKS_DIR/pre-receive # compares files that match .gitattributes filter to those actually tracked by git-lfs diff < ( git ls-files ':(attr:filter=lfs)' | sort ) < ( git lfs ls-files -n | sort ) >/dev/null ret = $? if [[ $ret -ne 0 ]] ; then echo > & 2 \"This remote has detected files committed without using Git LFS. Run 'brew install git-lfs && git lfs install' to install it and re-commit your files.\" ; exit 1 ; fi your_build_script.sh if [[ is running snapshot tests ]] ; then # fail fast if files not checked in using git lfs \" $HOOKS_DIR \" /pre-receive git lfs install --local git lfs pull fi Jetifier \u00b6 If using Jetifier to migrate off Support libraries, add the following to your gradle.properties to exclude bundled Android dependencies. android.jetifier.ignorelist=android-base-common,common Releases \u00b6 Our change log has release history. Using plugin application: buildscript { repositories { mavenCentral () google () } dependencies { classpath 'app.cash.paparazzi:paparazzi-gradle-plugin:0.9.1' } } apply plugin: 'app.cash.paparazzi' Using the plugins DSL: plugins { id 'app.cash.paparazzi' version '0.9.1' } Snapshots of the development version are available in Sonatype\u2019s snapshots repository . repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } Known Limitations \u00b6 Running Tests from the IDE \u00b6 java.lang.NullPointerException at java.base/java.io.File.<init>(File.java:278) at app.cash.paparazzi.EnvironmentKt.detectEnvironment(Environment.kt:36) Running tests from the IDE requires Android Studio Arctic Fox or later. Could not find \u2026 resource matching value 0x\u2026 (resolved name: \u2026) in current configuration. \u00b6 Could not find dimen resource matching value 0x10500C0 (resolved name: config_scrollbarSize) in current configuration. android.content.res.Resources$NotFoundException: Could not find dimen resource matching value 0x10500C0 (resolved name: config_scrollbarSize) in current configuration. Could not find integer resource matching value 0x10E00B4 (resolved name: config_screenshotChordKeyTimeout) in current configuration. android.content.res.Resources$NotFoundException: Could not find integer resource matching value 0x10E00B4 (resolved name: config_screenshotChordKeyTimeout) in current configuration. compileSdkVersion has to be 29 or higher. android { compileSdkVersion 29 } License \u00b6 Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#paparazzi","text":"An Android library to render your application screens without a physical device or emulator. class LaunchViewTest { @get : Rule val paparazzi = Paparazzi ( deviceConfig = PIXEL_5 , theme = \"android:Theme.Material.Light.NoActionBar\" // ...see docs for more options ) @Test fun simple () { val view = paparazzi . inflate < LaunchView >( R . layout . launch ) // or... // val view = LaunchView(paparazzi.context) view . setModel ( LaunchModel ( title = \"paparazzi\" )) paparazzi . snapshot ( view ) } }","title":"Paparazzi"},{"location":"#tasks","text":"$ ./gradlew sample:testDebug Runs tests and generates an HTML report at sample/build/reports/paparazzi/ showing all test runs and snapshots. $ ./gradlew sample:recordPaparazziDebug Saves snapshots as golden values to a predefined source-controlled location (defaults to src/test/snapshots ). $ ./gradlew sample:verifyPaparazziDebug Runs tests and verifies against previously-recorded golden values. For more examples, check out the sample project.","title":"Tasks"},{"location":"#git-lfs","text":"It is recommended you use Git LFS to store your snapshots. Here\u2019s a quick setup: $ brew install git-lfs $ git config core.hooksPath # optional, confirm where your git hooks will be installed $ git lfs install --local $ git lfs track **/snapshots/**/*.png $ git add .gitattributes On CI, you might set up something like: $HOOKS_DIR/pre-receive # compares files that match .gitattributes filter to those actually tracked by git-lfs diff < ( git ls-files ':(attr:filter=lfs)' | sort ) < ( git lfs ls-files -n | sort ) >/dev/null ret = $? if [[ $ret -ne 0 ]] ; then echo > & 2 \"This remote has detected files committed without using Git LFS. Run 'brew install git-lfs && git lfs install' to install it and re-commit your files.\" ; exit 1 ; fi your_build_script.sh if [[ is running snapshot tests ]] ; then # fail fast if files not checked in using git lfs \" $HOOKS_DIR \" /pre-receive git lfs install --local git lfs pull fi","title":"Git LFS"},{"location":"#jetifier","text":"If using Jetifier to migrate off Support libraries, add the following to your gradle.properties to exclude bundled Android dependencies. android.jetifier.ignorelist=android-base-common,common","title":"Jetifier"},{"location":"#releases","text":"Our change log has release history. Using plugin application: buildscript { repositories { mavenCentral () google () } dependencies { classpath 'app.cash.paparazzi:paparazzi-gradle-plugin:0.9.1' } } apply plugin: 'app.cash.paparazzi' Using the plugins DSL: plugins { id 'app.cash.paparazzi' version '0.9.1' } Snapshots of the development version are available in Sonatype\u2019s snapshots repository . repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } }","title":"Releases"},{"location":"#known-limitations","text":"","title":"Known Limitations"},{"location":"#running-tests-from-the-ide","text":"java.lang.NullPointerException at java.base/java.io.File.<init>(File.java:278) at app.cash.paparazzi.EnvironmentKt.detectEnvironment(Environment.kt:36) Running tests from the IDE requires Android Studio Arctic Fox or later.","title":"Running Tests from the IDE"},{"location":"#could-not-find-resource-matching-value-0x-resolved-name-in-current-configuration","text":"Could not find dimen resource matching value 0x10500C0 (resolved name: config_scrollbarSize) in current configuration. android.content.res.Resources$NotFoundException: Could not find dimen resource matching value 0x10500C0 (resolved name: config_scrollbarSize) in current configuration. Could not find integer resource matching value 0x10E00B4 (resolved name: config_screenshotChordKeyTimeout) in current configuration. android.content.res.Resources$NotFoundException: Could not find integer resource matching value 0x10E00B4 (resolved name: config_screenshotChordKeyTimeout) in current configuration. compileSdkVersion has to be 29 or higher. android { compileSdkVersion 29 }","title":"Could not find ... resource matching value 0x... (resolved name: ...) in current configuration."},{"location":"#license","text":"Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 0.9.1 \u00b6 2022-01-14 Fixed \u00b6 Download mac arm artifact if on M1 machines Support for assets from transitive dependencies Add fix for ClassNotFoundException when using nonTransitiveRClass Update RELEASING notes to publish plugin marker artifact Avoid NPE in AccessibilityRenderExtension when layout params are not supplied Use View.id to generate consistent colors for accessibility entries when views are modified Kudos to @luis-cortes, @geoff-powell, @autonomousapps and @LuK1709 for their contributions this release! Version 0.9.0 \u00b6 2021-11-22 New \u00b6 Migrate Paparazzi to layoutlib Arctic Fox 2020.3.1, providing native support for M1 machines Migrate Paparazzi to layoutlib 4.2, unlocking future Compose support Add support for projects enabling non-transitive resources RenderExtension now visits view hierarchy pre-rendering instead of layering bitmaps post-rendering Fail-fast when Bridge.init fails, usually due to native crash Expose RenderingMode as a configurable option Bump default compileSdk to API 30 Improve Java-interoperability experience Kotlin 1.5.31 Fixed \u00b6 Don\u2019t require Android plugin to be declared before Paparazzi plugin Clear AnimationHandler leak after each snapshot Don\u2019t generate empty mov files on snapshot failure Add Kotlin platform bom to prevent classpath conflicts during test builds Use correct default Android SDK path on Windows Use platform-agnostic file paths in Gradle artifacts to support remote caching across platforms Use platform-agnostic file paths in Javascript for web page support on Windows Fix font scaling issue in AccessibilityRenderExtension by using bundled font Kudos to @luis-cortes, @geoff-powell and @TWiStErRob for their contributions this release! Version 0.8.0 \u00b6 2021-10-07 New \u00b6 Migrate Paparazzi to use native layoutlib for better rendering and API 30 support Add new extension for rendering accessibility metadata Add support for fontScale in DeviceConfig Add device config for Pixel 5 Add tasks to Gradle task verification group Migrate publishing to gradle-maven-publish-plugin Migrate builds to Github Actions Migrate sample test from Burst to TestParameterInjector Kotlin 1.5.21 [Gradle Plugin] Support for configuration caching [Gradle Plugin] Gradle 7.2 Fixed \u00b6 Add method interceptor for matrix multiplication operations Don\u2019t swallow FileNotFoundExceptions when overridden platform dir doesn\u2019t exist [Gradle Plugin] Fix remote caching bug by referencing relative, not absolute, paths in intermediate resources file. Version 0.7.1 \u00b6 2021-05-17 New \u00b6 [Gradle Plugin] Support the \u2013tests option for record/verify tasks Fixed \u00b6 [Gradle Plugin] Defer task configuration until created Version 0.7.0 \u00b6 2021-02-26 New \u00b6 Kotlin 1.4.30 Add support for inline complex XML resources Enable Burst support Expose maximum percentage difference in image verification as a setting Render extension api to add extra information to snapshots Allow selection of night mode in DeviceConfig [Gradle Plugin] Gradle 6.8.3 [Gradle Plugin] Creating an umbrella task to execute on all variants Fixed \u00b6 Properly execute Choreographer.doFrame after view has been laid out Fix broken text appearances when style resource names contain periods Fix ability to access asset files Use target-sdk to simulate device when available Always write screenshots to disk in record mode Don\u2019t crash when running on Java 12+ [Gradle Plugin] Force test re-runs when a resource or asset has changed [Gradle Plugin] Force test re-runs if generated report or snapshot dirs are deleted Version 0.6.0 \u00b6 2020-10-02 As of this release, consumers must build on Java 11 environments. New \u00b6 Point to a more recent version of layoutlib that runs on Android Q and builds with Java 11. Refactor Paparazzi to better support non-Gradle builds Added device configs for Pixel 4 series Version 0.5.2 \u00b6 2020-09-17 Fixed \u00b6 [Gradle Plugin] Fixed record and verify tasks in multi-module projects. Version 0.5.1 \u00b6 2020-09-17 Fixed \u00b6 [Gradle Plugin] Fixed race condition in record and verify tasks. Version 0.5.0 \u00b6 2020-09-16 Initial release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-091","text":"2022-01-14","title":"Version 0.9.1"},{"location":"changelog/#fixed","text":"Download mac arm artifact if on M1 machines Support for assets from transitive dependencies Add fix for ClassNotFoundException when using nonTransitiveRClass Update RELEASING notes to publish plugin marker artifact Avoid NPE in AccessibilityRenderExtension when layout params are not supplied Use View.id to generate consistent colors for accessibility entries when views are modified Kudos to @luis-cortes, @geoff-powell, @autonomousapps and @LuK1709 for their contributions this release!","title":"Fixed"},{"location":"changelog/#version-090","text":"2021-11-22","title":"Version 0.9.0"},{"location":"changelog/#new","text":"Migrate Paparazzi to layoutlib Arctic Fox 2020.3.1, providing native support for M1 machines Migrate Paparazzi to layoutlib 4.2, unlocking future Compose support Add support for projects enabling non-transitive resources RenderExtension now visits view hierarchy pre-rendering instead of layering bitmaps post-rendering Fail-fast when Bridge.init fails, usually due to native crash Expose RenderingMode as a configurable option Bump default compileSdk to API 30 Improve Java-interoperability experience Kotlin 1.5.31","title":"New"},{"location":"changelog/#fixed_1","text":"Don\u2019t require Android plugin to be declared before Paparazzi plugin Clear AnimationHandler leak after each snapshot Don\u2019t generate empty mov files on snapshot failure Add Kotlin platform bom to prevent classpath conflicts during test builds Use correct default Android SDK path on Windows Use platform-agnostic file paths in Gradle artifacts to support remote caching across platforms Use platform-agnostic file paths in Javascript for web page support on Windows Fix font scaling issue in AccessibilityRenderExtension by using bundled font Kudos to @luis-cortes, @geoff-powell and @TWiStErRob for their contributions this release!","title":"Fixed"},{"location":"changelog/#version-080","text":"2021-10-07","title":"Version 0.8.0"},{"location":"changelog/#new_1","text":"Migrate Paparazzi to use native layoutlib for better rendering and API 30 support Add new extension for rendering accessibility metadata Add support for fontScale in DeviceConfig Add device config for Pixel 5 Add tasks to Gradle task verification group Migrate publishing to gradle-maven-publish-plugin Migrate builds to Github Actions Migrate sample test from Burst to TestParameterInjector Kotlin 1.5.21 [Gradle Plugin] Support for configuration caching [Gradle Plugin] Gradle 7.2","title":"New"},{"location":"changelog/#fixed_2","text":"Add method interceptor for matrix multiplication operations Don\u2019t swallow FileNotFoundExceptions when overridden platform dir doesn\u2019t exist [Gradle Plugin] Fix remote caching bug by referencing relative, not absolute, paths in intermediate resources file.","title":"Fixed"},{"location":"changelog/#version-071","text":"2021-05-17","title":"Version 0.7.1"},{"location":"changelog/#new_2","text":"[Gradle Plugin] Support the \u2013tests option for record/verify tasks","title":"New"},{"location":"changelog/#fixed_3","text":"[Gradle Plugin] Defer task configuration until created","title":"Fixed"},{"location":"changelog/#version-070","text":"2021-02-26","title":"Version 0.7.0"},{"location":"changelog/#new_3","text":"Kotlin 1.4.30 Add support for inline complex XML resources Enable Burst support Expose maximum percentage difference in image verification as a setting Render extension api to add extra information to snapshots Allow selection of night mode in DeviceConfig [Gradle Plugin] Gradle 6.8.3 [Gradle Plugin] Creating an umbrella task to execute on all variants","title":"New"},{"location":"changelog/#fixed_4","text":"Properly execute Choreographer.doFrame after view has been laid out Fix broken text appearances when style resource names contain periods Fix ability to access asset files Use target-sdk to simulate device when available Always write screenshots to disk in record mode Don\u2019t crash when running on Java 12+ [Gradle Plugin] Force test re-runs when a resource or asset has changed [Gradle Plugin] Force test re-runs if generated report or snapshot dirs are deleted","title":"Fixed"},{"location":"changelog/#version-060","text":"2020-10-02 As of this release, consumers must build on Java 11 environments.","title":"Version 0.6.0"},{"location":"changelog/#new_4","text":"Point to a more recent version of layoutlib that runs on Android Q and builds with Java 11. Refactor Paparazzi to better support non-Gradle builds Added device configs for Pixel 4 series","title":"New"},{"location":"changelog/#version-052","text":"2020-09-17","title":"Version 0.5.2"},{"location":"changelog/#fixed_5","text":"[Gradle Plugin] Fixed record and verify tasks in multi-module projects.","title":"Fixed"},{"location":"changelog/#version-051","text":"2020-09-17","title":"Version 0.5.1"},{"location":"changelog/#fixed_6","text":"[Gradle Plugin] Fixed race condition in record and verify tasks.","title":"Fixed"},{"location":"changelog/#version-050","text":"2020-09-16 Initial release.","title":"Version 0.5.0"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"releasing/","text":"Releasing \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.paparazzi:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.paparazzi:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags Prerequisites \u00b6 In ~/.gradle/gradle.properties , set the following: mavenCentralUsername - Sonatype username for releasing to app.cash . mavenCentralPassword - Sonatype password for releasing to app.cash .","title":"Releasing"},{"location":"releasing/#releasing","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.paparazzi:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.paparazzi:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Releasing"},{"location":"releasing/#prerequisites","text":"In ~/.gradle/gradle.properties , set the following: mavenCentralUsername - Sonatype username for releasing to app.cash . mavenCentralPassword - Sonatype password for releasing to app.cash .","title":"Prerequisites"},{"location":"0.x/","text":"// paparazzi paparazzi \u00b6 Packages \u00b6 Name app.cash.paparazzi app.cash.paparazzi.accessibility app.cash.paparazzi.internal app.cash.paparazzi.internal.parsers","title":"Index"},{"location":"0.x/#paparazzi","text":"","title":"paparazzi"},{"location":"0.x/#packages","text":"Name app.cash.paparazzi app.cash.paparazzi.accessibility app.cash.paparazzi.internal app.cash.paparazzi.internal.parsers","title":"Packages"},{"location":"0.x/paparazzi/app.cash.paparazzi/","text":"// paparazzi / app.cash.paparazzi Package app.cash.paparazzi \u00b6 Types \u00b6 Name Summary DeviceConfig [jvm] data class DeviceConfig (screenHeight: Int , screenWidth: Int , xdpi: Int , ydpi: Int , orientation: ScreenOrientation, nightMode: NightMode, density: Density, fontScale: Float , ratio: ScreenRatio, size: ScreenSize, keyboard: Keyboard, touchScreen: TouchScreen, keyboardState: KeyboardState, softButtons: Boolean , navigation: Navigation, released: String ) Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse build.prop and attrs.xml to generate the appropriate maps. Environment [jvm] data class Environment (platformDir: String , appTestDir: String , resDir: String , assetsDir: String , packageName: String , compileSdkVersion: Int , platformDataDir: String , resourcePackageNames: List < String >) Flags [jvm] object Flags HtmlReportWriter [jvm] class HtmlReportWriter @ JvmOverloads constructor(runName: String , rootDirectory: File , snapshotRootDirectory: File ) : SnapshotHandler Creates an HTML report that avoids writing files that have already been written. Paparazzi [jvm] class Paparazzi @ JvmOverloads constructor(environment: Environment , deviceConfig: DeviceConfig , theme: String , renderingMode: SessionParams.RenderingMode, appCompatEnabled: Boolean , maxPercentDifference: Double , snapshotHandler: SnapshotHandler , renderExtensions: Set < RenderExtension >) : TestRule RenderExtension [jvm] interface RenderExtension An extension for overlaying additional information on top of each rendered frame. Snapshot [jvm] @JsonClass(generateAdapter = true) data class Snapshot (name: String ?, testName: TestName , timestamp: Date , tags: List < String >, file: String ?) SnapshotHandler [jvm] interface SnapshotHandler : Closeable SnapshotVerifier [jvm] class SnapshotVerifier @ JvmOverloads constructor(maxPercentDifference: Double , rootDirectory: File ) : SnapshotHandler TestName [jvm] data class TestName (packageName: String , className: String , methodName: String ) Functions \u00b6 Name Summary androidHome [jvm] fun androidHome (): String detectEnvironment [jvm] fun detectEnvironment (): Environment","title":"0.x API"},{"location":"0.x/paparazzi/app.cash.paparazzi/#package-appcashpaparazzi","text":"","title":"Package app.cash.paparazzi"},{"location":"0.x/paparazzi/app.cash.paparazzi/#types","text":"Name Summary DeviceConfig [jvm] data class DeviceConfig (screenHeight: Int , screenWidth: Int , xdpi: Int , ydpi: Int , orientation: ScreenOrientation, nightMode: NightMode, density: Density, fontScale: Float , ratio: ScreenRatio, size: ScreenSize, keyboard: Keyboard, touchScreen: TouchScreen, keyboardState: KeyboardState, softButtons: Boolean , navigation: Navigation, released: String ) Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse build.prop and attrs.xml to generate the appropriate maps. Environment [jvm] data class Environment (platformDir: String , appTestDir: String , resDir: String , assetsDir: String , packageName: String , compileSdkVersion: Int , platformDataDir: String , resourcePackageNames: List < String >) Flags [jvm] object Flags HtmlReportWriter [jvm] class HtmlReportWriter @ JvmOverloads constructor(runName: String , rootDirectory: File , snapshotRootDirectory: File ) : SnapshotHandler Creates an HTML report that avoids writing files that have already been written. Paparazzi [jvm] class Paparazzi @ JvmOverloads constructor(environment: Environment , deviceConfig: DeviceConfig , theme: String , renderingMode: SessionParams.RenderingMode, appCompatEnabled: Boolean , maxPercentDifference: Double , snapshotHandler: SnapshotHandler , renderExtensions: Set < RenderExtension >) : TestRule RenderExtension [jvm] interface RenderExtension An extension for overlaying additional information on top of each rendered frame. Snapshot [jvm] @JsonClass(generateAdapter = true) data class Snapshot (name: String ?, testName: TestName , timestamp: Date , tags: List < String >, file: String ?) SnapshotHandler [jvm] interface SnapshotHandler : Closeable SnapshotVerifier [jvm] class SnapshotVerifier @ JvmOverloads constructor(maxPercentDifference: Double , rootDirectory: File ) : SnapshotHandler TestName [jvm] data class TestName (packageName: String , className: String , methodName: String )","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi/#functions","text":"Name Summary androidHome [jvm] fun androidHome (): String detectEnvironment [jvm] fun detectEnvironment (): Environment","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/android-home/","text":"// paparazzi / app.cash.paparazzi / androidHome androidHome \u00b6 [jvm]\\ fun androidHome (): String","title":"Android home"},{"location":"0.x/paparazzi/app.cash.paparazzi/android-home/#androidhome","text":"[jvm]\\ fun androidHome (): String","title":"androidHome"},{"location":"0.x/paparazzi/app.cash.paparazzi/detect-environment/","text":"// paparazzi / app.cash.paparazzi / detectEnvironment detectEnvironment \u00b6 [jvm]\\ fun detectEnvironment (): Environment","title":"Detect environment"},{"location":"0.x/paparazzi/app.cash.paparazzi/detect-environment/#detectenvironment","text":"[jvm]\\ fun detectEnvironment (): Environment","title":"detectEnvironment"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig DeviceConfig \u00b6 [jvm]\\ data class DeviceConfig (screenHeight: Int , screenWidth: Int , xdpi: Int , ydpi: Int , orientation: ScreenOrientation, nightMode: NightMode, density: Density, fontScale: Float , ratio: ScreenRatio, size: ScreenSize, keyboard: Keyboard, touchScreen: TouchScreen, keyboardState: KeyboardState, softButtons: Boolean , navigation: Navigation, released: String ) Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse build.prop and attrs.xml to generate the appropriate maps. Defaults are for a Nexus 4 device. Constructors \u00b6 DeviceConfig [jvm] fun DeviceConfig (screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, nightMode: NightMode = NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1f, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, released: String = \u201cNovember 13, 2012\u201d) Types \u00b6 Name Summary Companion [jvm] object Companion Device specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml Properties \u00b6 Name Summary density [jvm] val density : Density folderConfiguration [jvm] val folderConfiguration : FolderConfiguration fontScale [jvm] val fontScale : Float = 1f hardwareConfig [jvm] val hardwareConfig : HardwareConfig keyboard [jvm] val keyboard : Keyboard keyboardState [jvm] val keyboardState : KeyboardState navigation [jvm] val navigation : Navigation nightMode [jvm] val nightMode : NightMode orientation [jvm] val orientation : ScreenOrientation ratio [jvm] val ratio : ScreenRatio released [jvm] val released : String screenHeight [jvm] val screenHeight : Int = 1280 screenWidth [jvm] val screenWidth : Int = 768 size [jvm] val size : ScreenSize softButtons [jvm] val softButtons : Boolean = true touchScreen [jvm] val touchScreen : TouchScreen xdpi [jvm] val xdpi : Int = 320 ydpi [jvm] val ydpi : Int = 320","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/#deviceconfig","text":"[jvm]\\ data class DeviceConfig (screenHeight: Int , screenWidth: Int , xdpi: Int , ydpi: Int , orientation: ScreenOrientation, nightMode: NightMode, density: Density, fontScale: Float , ratio: ScreenRatio, size: ScreenSize, keyboard: Keyboard, touchScreen: TouchScreen, keyboardState: KeyboardState, softButtons: Boolean , navigation: Navigation, released: String ) Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse build.prop and attrs.xml to generate the appropriate maps. Defaults are for a Nexus 4 device.","title":"DeviceConfig"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/#constructors","text":"DeviceConfig [jvm] fun DeviceConfig (screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, nightMode: NightMode = NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1f, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, released: String = \u201cNovember 13, 2012\u201d)","title":"Constructors"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/#types","text":"Name Summary Companion [jvm] object Companion Device specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/#properties","text":"Name Summary density [jvm] val density : Density folderConfiguration [jvm] val folderConfiguration : FolderConfiguration fontScale [jvm] val fontScale : Float = 1f hardwareConfig [jvm] val hardwareConfig : HardwareConfig keyboard [jvm] val keyboard : Keyboard keyboardState [jvm] val keyboardState : KeyboardState navigation [jvm] val navigation : Navigation nightMode [jvm] val nightMode : NightMode orientation [jvm] val orientation : ScreenOrientation ratio [jvm] val ratio : ScreenRatio released [jvm] val released : String screenHeight [jvm] val screenHeight : Int = 1280 screenWidth [jvm] val screenWidth : Int = 768 size [jvm] val size : ScreenSize softButtons [jvm] val softButtons : Boolean = true touchScreen [jvm] val touchScreen : TouchScreen xdpi [jvm] val xdpi : Int = 320 ydpi [jvm] val ydpi : Int = 320","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-device-config/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / DeviceConfig DeviceConfig \u00b6 [jvm]\\ fun DeviceConfig (screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, nightMode: NightMode = NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1f, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, released: String = \u201cNovember 13, 2012\u201d)","title":" device config"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-device-config/#deviceconfig","text":"[jvm]\\ fun DeviceConfig (screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, nightMode: NightMode = NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1f, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, released: String = \u201cNovember 13, 2012\u201d)","title":"DeviceConfig"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/density/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / density density \u00b6 [jvm]\\ val density : Density","title":"Density"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/density/#density","text":"[jvm]\\ val density : Density","title":"density"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/folder-configuration/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / folderConfiguration folderConfiguration \u00b6 [jvm]\\ val folderConfiguration : FolderConfiguration","title":"Folder configuration"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/folder-configuration/#folderconfiguration","text":"[jvm]\\ val folderConfiguration : FolderConfiguration","title":"folderConfiguration"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/font-scale/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / fontScale fontScale \u00b6 [jvm]\\ val fontScale : Float = 1f","title":"Font scale"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/font-scale/#fontscale","text":"[jvm]\\ val fontScale : Float = 1f","title":"fontScale"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/hardware-config/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / hardwareConfig hardwareConfig \u00b6 [jvm]\\ val hardwareConfig : HardwareConfig","title":"Hardware config"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/hardware-config/#hardwareconfig","text":"[jvm]\\ val hardwareConfig : HardwareConfig","title":"hardwareConfig"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/keyboard-state/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / keyboardState keyboardState \u00b6 [jvm]\\ val keyboardState : KeyboardState","title":"Keyboard state"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/keyboard-state/#keyboardstate","text":"[jvm]\\ val keyboardState : KeyboardState","title":"keyboardState"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/keyboard/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / keyboard keyboard \u00b6 [jvm]\\ val keyboard : Keyboard","title":"Keyboard"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/keyboard/#keyboard","text":"[jvm]\\ val keyboard : Keyboard","title":"keyboard"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/navigation/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / navigation navigation \u00b6 [jvm]\\ val navigation : Navigation","title":"Navigation"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/navigation/#navigation","text":"[jvm]\\ val navigation : Navigation","title":"navigation"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/night-mode/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / nightMode nightMode \u00b6 [jvm]\\ val nightMode : NightMode","title":"Night mode"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/night-mode/#nightmode","text":"[jvm]\\ val nightMode : NightMode","title":"nightMode"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/orientation/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / orientation orientation \u00b6 [jvm]\\ val orientation : ScreenOrientation","title":"Orientation"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/orientation/#orientation","text":"[jvm]\\ val orientation : ScreenOrientation","title":"orientation"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/ratio/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / ratio ratio \u00b6 [jvm]\\ val ratio : ScreenRatio","title":"Ratio"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/ratio/#ratio","text":"[jvm]\\ val ratio : ScreenRatio","title":"ratio"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/released/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / released released \u00b6 [jvm]\\ val released : String","title":"Released"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/released/#released","text":"[jvm]\\ val released : String","title":"released"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/screen-height/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / screenHeight screenHeight \u00b6 [jvm]\\ val screenHeight : Int = 1280","title":"Screen height"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/screen-height/#screenheight","text":"[jvm]\\ val screenHeight : Int = 1280","title":"screenHeight"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/screen-width/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / screenWidth screenWidth \u00b6 [jvm]\\ val screenWidth : Int = 768","title":"Screen width"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/screen-width/#screenwidth","text":"[jvm]\\ val screenWidth : Int = 768","title":"screenWidth"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/size/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / size size \u00b6 [jvm]\\ val size : ScreenSize","title":"Size"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/size/#size","text":"[jvm]\\ val size : ScreenSize","title":"size"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/soft-buttons/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / softButtons softButtons \u00b6 [jvm]\\ val softButtons : Boolean = true","title":"Soft buttons"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/soft-buttons/#softbuttons","text":"[jvm]\\ val softButtons : Boolean = true","title":"softButtons"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/touch-screen/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / touchScreen touchScreen \u00b6 [jvm]\\ val touchScreen : TouchScreen","title":"Touch screen"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/touch-screen/#touchscreen","text":"[jvm]\\ val touchScreen : TouchScreen","title":"touchScreen"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/xdpi/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / xdpi xdpi \u00b6 [jvm]\\ val xdpi : Int = 320","title":"Xdpi"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/xdpi/#xdpi","text":"[jvm]\\ val xdpi : Int = 320","title":"xdpi"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/ydpi/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / ydpi ydpi \u00b6 [jvm]\\ val ydpi : Int = 320","title":"Ydpi"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/ydpi/#ydpi","text":"[jvm]\\ val ydpi : Int = 320","title":"ydpi"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion Companion \u00b6 [jvm]\\ object Companion Device specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml Release dates obtained from Wikipedia. Functions \u00b6 Name Summary getEnumMap [jvm] fun getEnumMap (path: File ): Map < String , Map < String , Int >> loadProperties [jvm] fun loadProperties (path: File ): Map < String , String > Properties \u00b6 Name Summary NEXUS_10 [jvm] @ JvmField val NEXUS_10 : DeviceConfig NEXUS_4 [jvm] @ JvmField val NEXUS_4 : DeviceConfig NEXUS_5 [jvm] @ JvmField val NEXUS_5 : DeviceConfig NEXUS_5_LAND [jvm] @ JvmField val NEXUS_5_LAND : DeviceConfig NEXUS_7 [jvm] @ JvmField val NEXUS_7 : DeviceConfig NEXUS_7_2012 [jvm] @ JvmField val NEXUS_7_2012 : DeviceConfig PIXEL [jvm] @ JvmField val PIXEL : DeviceConfig PIXEL_2 [jvm] @ JvmField val PIXEL_2 : DeviceConfig PIXEL_2_XL [jvm] @ JvmField val PIXEL_2_XL : DeviceConfig PIXEL_3 [jvm] @ JvmField val PIXEL_3 : DeviceConfig PIXEL_3_XL [jvm] @ JvmField val PIXEL_3_XL : DeviceConfig PIXEL_3A [jvm] @ JvmField val PIXEL_3A : DeviceConfig PIXEL_3A_XL [jvm] @ JvmField val PIXEL_3A_XL : DeviceConfig PIXEL_4 [jvm] @ JvmField val PIXEL_4 : DeviceConfig PIXEL_4_XL [jvm] @ JvmField val PIXEL_4_XL : DeviceConfig PIXEL_4A [jvm] @ JvmField val PIXEL_4A : DeviceConfig PIXEL_5 [jvm] @ JvmField val PIXEL_5 : DeviceConfig PIXEL_C [jvm] @ JvmField val PIXEL_C : DeviceConfig PIXEL_XL [jvm] @ JvmField val PIXEL_XL : DeviceConfig","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#companion","text":"[jvm]\\ object Companion Device specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml Release dates obtained from Wikipedia.","title":"Companion"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#functions","text":"Name Summary getEnumMap [jvm] fun getEnumMap (path: File ): Map < String , Map < String , Int >> loadProperties [jvm] fun loadProperties (path: File ): Map < String , String >","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#properties","text":"Name Summary NEXUS_10 [jvm] @ JvmField val NEXUS_10 : DeviceConfig NEXUS_4 [jvm] @ JvmField val NEXUS_4 : DeviceConfig NEXUS_5 [jvm] @ JvmField val NEXUS_5 : DeviceConfig NEXUS_5_LAND [jvm] @ JvmField val NEXUS_5_LAND : DeviceConfig NEXUS_7 [jvm] @ JvmField val NEXUS_7 : DeviceConfig NEXUS_7_2012 [jvm] @ JvmField val NEXUS_7_2012 : DeviceConfig PIXEL [jvm] @ JvmField val PIXEL : DeviceConfig PIXEL_2 [jvm] @ JvmField val PIXEL_2 : DeviceConfig PIXEL_2_XL [jvm] @ JvmField val PIXEL_2_XL : DeviceConfig PIXEL_3 [jvm] @ JvmField val PIXEL_3 : DeviceConfig PIXEL_3_XL [jvm] @ JvmField val PIXEL_3_XL : DeviceConfig PIXEL_3A [jvm] @ JvmField val PIXEL_3A : DeviceConfig PIXEL_3A_XL [jvm] @ JvmField val PIXEL_3A_XL : DeviceConfig PIXEL_4 [jvm] @ JvmField val PIXEL_4 : DeviceConfig PIXEL_4_XL [jvm] @ JvmField val PIXEL_4_XL : DeviceConfig PIXEL_4A [jvm] @ JvmField val PIXEL_4A : DeviceConfig PIXEL_5 [jvm] @ JvmField val PIXEL_5 : DeviceConfig PIXEL_C [jvm] @ JvmField val PIXEL_C : DeviceConfig PIXEL_XL [jvm] @ JvmField val PIXEL_XL : DeviceConfig","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_10/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / NEXUS_10 NEXUS_10 \u00b6 [jvm]\\ @ JvmField val NEXUS_10 : DeviceConfig","title":" n e x u s 10"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_10/#nexus_10","text":"[jvm]\\ @ JvmField val NEXUS_10 : DeviceConfig","title":"NEXUS_10"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_4/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / NEXUS_4 NEXUS_4 \u00b6 [jvm]\\ @ JvmField val NEXUS_4 : DeviceConfig","title":" n e x u s 4"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_4/#nexus_4","text":"[jvm]\\ @ JvmField val NEXUS_4 : DeviceConfig","title":"NEXUS_4"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / NEXUS_5 NEXUS_5 \u00b6 [jvm]\\ @ JvmField val NEXUS_5 : DeviceConfig","title":" n e x u s 5"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5/#nexus_5","text":"[jvm]\\ @ JvmField val NEXUS_5 : DeviceConfig","title":"NEXUS_5"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5_-l-a-n-d/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / NEXUS_5_LAND NEXUS_5_LAND \u00b6 [jvm]\\ @ JvmField val NEXUS_5_LAND : DeviceConfig","title":" n e x u s 5  l a n d"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5_-l-a-n-d/#nexus_5_land","text":"[jvm]\\ @ JvmField val NEXUS_5_LAND : DeviceConfig","title":"NEXUS_5_LAND"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / NEXUS_7 NEXUS_7 \u00b6 [jvm]\\ @ JvmField val NEXUS_7 : DeviceConfig","title":" n e x u s 7"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7/#nexus_7","text":"[jvm]\\ @ JvmField val NEXUS_7 : DeviceConfig","title":"NEXUS_7"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7_2012/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / NEXUS_7_2012 NEXUS_7_2012 \u00b6 [jvm]\\ @ JvmField val NEXUS_7_2012 : DeviceConfig","title":" n e x u s 7 2012"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7_2012/#nexus_7_2012","text":"[jvm]\\ @ JvmField val NEXUS_7_2012 : DeviceConfig","title":"NEXUS_7_2012"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL PIXEL \u00b6 [jvm]\\ @ JvmField val PIXEL : DeviceConfig","title":" p i x e l"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l/#pixel","text":"[jvm]\\ @ JvmField val PIXEL : DeviceConfig","title":"PIXEL"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-c/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_C PIXEL_C \u00b6 [jvm]\\ @ JvmField val PIXEL_C : DeviceConfig","title":" p i x e l  c"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-c/#pixel_c","text":"[jvm]\\ @ JvmField val PIXEL_C : DeviceConfig","title":"PIXEL_C"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-x-l/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_XL PIXEL_XL \u00b6 [jvm]\\ @ JvmField val PIXEL_XL : DeviceConfig","title":" p i x e l  x l"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-x-l/#pixel_xl","text":"[jvm]\\ @ JvmField val PIXEL_XL : DeviceConfig","title":"PIXEL_XL"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_2 PIXEL_2 \u00b6 [jvm]\\ @ JvmField val PIXEL_2 : DeviceConfig","title":" p i x e l 2"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2/#pixel_2","text":"[jvm]\\ @ JvmField val PIXEL_2 : DeviceConfig","title":"PIXEL_2"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2_-x-l/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_2_XL PIXEL_2_XL \u00b6 [jvm]\\ @ JvmField val PIXEL_2_XL : DeviceConfig","title":" p i x e l 2  x l"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2_-x-l/#pixel_2_xl","text":"[jvm]\\ @ JvmField val PIXEL_2_XL : DeviceConfig","title":"PIXEL_2_XL"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_3A PIXEL_3A \u00b6 [jvm]\\ @ JvmField val PIXEL_3A : DeviceConfig","title":" p i x e l 3 a"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a/#pixel_3a","text":"[jvm]\\ @ JvmField val PIXEL_3A : DeviceConfig","title":"PIXEL_3A"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a_-x-l/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_3A_XL PIXEL_3A_XL \u00b6 [jvm]\\ @ JvmField val PIXEL_3A_XL : DeviceConfig","title":" p i x e l 3 a  x l"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a_-x-l/#pixel_3a_xl","text":"[jvm]\\ @ JvmField val PIXEL_3A_XL : DeviceConfig","title":"PIXEL_3A_XL"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_3 PIXEL_3 \u00b6 [jvm]\\ @ JvmField val PIXEL_3 : DeviceConfig","title":" p i x e l 3"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3/#pixel_3","text":"[jvm]\\ @ JvmField val PIXEL_3 : DeviceConfig","title":"PIXEL_3"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3_-x-l/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_3_XL PIXEL_3_XL \u00b6 [jvm]\\ @ JvmField val PIXEL_3_XL : DeviceConfig","title":" p i x e l 3  x l"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3_-x-l/#pixel_3_xl","text":"[jvm]\\ @ JvmField val PIXEL_3_XL : DeviceConfig","title":"PIXEL_3_XL"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4-a/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_4A PIXEL_4A \u00b6 [jvm]\\ @ JvmField val PIXEL_4A : DeviceConfig","title":" p i x e l 4 a"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4-a/#pixel_4a","text":"[jvm]\\ @ JvmField val PIXEL_4A : DeviceConfig","title":"PIXEL_4A"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_4 PIXEL_4 \u00b6 [jvm]\\ @ JvmField val PIXEL_4 : DeviceConfig","title":" p i x e l 4"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4/#pixel_4","text":"[jvm]\\ @ JvmField val PIXEL_4 : DeviceConfig","title":"PIXEL_4"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4_-x-l/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_4_XL PIXEL_4_XL \u00b6 [jvm]\\ @ JvmField val PIXEL_4_XL : DeviceConfig","title":" p i x e l 4  x l"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4_-x-l/#pixel_4_xl","text":"[jvm]\\ @ JvmField val PIXEL_4_XL : DeviceConfig","title":"PIXEL_4_XL"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_5/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / PIXEL_5 PIXEL_5 \u00b6 [jvm]\\ @ JvmField val PIXEL_5 : DeviceConfig","title":" p i x e l 5"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_5/#pixel_5","text":"[jvm]\\ @ JvmField val PIXEL_5 : DeviceConfig","title":"PIXEL_5"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/get-enum-map/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / getEnumMap getEnumMap \u00b6 [jvm]\\ fun getEnumMap (path: File ): Map < String , Map < String , Int >>","title":"Get enum map"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/get-enum-map/#getenummap","text":"[jvm]\\ fun getEnumMap (path: File ): Map < String , Map < String , Int >>","title":"getEnumMap"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/load-properties/","text":"// paparazzi / app.cash.paparazzi / DeviceConfig / Companion / loadProperties loadProperties \u00b6 [jvm]\\ fun loadProperties (path: File ): Map < String , String >","title":"Load properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-device-config/-companion/load-properties/#loadproperties","text":"[jvm]\\ fun loadProperties (path: File ): Map < String , String >","title":"loadProperties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/","text":"// paparazzi / app.cash.paparazzi / Environment Environment \u00b6 [jvm]\\ data class Environment (platformDir: String , appTestDir: String , resDir: String , assetsDir: String , packageName: String , compileSdkVersion: Int , platformDataDir: String , resourcePackageNames: List < String >) Properties \u00b6 Name Summary appTestDir [jvm] val appTestDir : String assetsDir [jvm] val assetsDir : String compileSdkVersion [jvm] val compileSdkVersion : Int packageName [jvm] val packageName : String platformDataDir [jvm] val platformDataDir : String platformDir [jvm] val platformDir : String resDir [jvm] val resDir : String resourcePackageNames [jvm] val resourcePackageNames : List < String >","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/#environment","text":"[jvm]\\ data class Environment (platformDir: String , appTestDir: String , resDir: String , assetsDir: String , packageName: String , compileSdkVersion: Int , platformDataDir: String , resourcePackageNames: List < String >)","title":"Environment"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/#properties","text":"Name Summary appTestDir [jvm] val appTestDir : String assetsDir [jvm] val assetsDir : String compileSdkVersion [jvm] val compileSdkVersion : Int packageName [jvm] val packageName : String platformDataDir [jvm] val platformDataDir : String platformDir [jvm] val platformDir : String resDir [jvm] val resDir : String resourcePackageNames [jvm] val resourcePackageNames : List < String >","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/-environment/","text":"// paparazzi / app.cash.paparazzi / Environment / Environment Environment \u00b6 [jvm]\\ fun Environment (platformDir: String , appTestDir: String , resDir: String , assetsDir: String , packageName: String , compileSdkVersion: Int , platformDataDir: String , resourcePackageNames: List < String >)","title":" environment"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/-environment/#environment","text":"[jvm]\\ fun Environment (platformDir: String , appTestDir: String , resDir: String , assetsDir: String , packageName: String , compileSdkVersion: Int , platformDataDir: String , resourcePackageNames: List < String >)","title":"Environment"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/app-test-dir/","text":"// paparazzi / app.cash.paparazzi / Environment / appTestDir appTestDir \u00b6 [jvm]\\ val appTestDir : String","title":"App test dir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/app-test-dir/#apptestdir","text":"[jvm]\\ val appTestDir : String","title":"appTestDir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/assets-dir/","text":"// paparazzi / app.cash.paparazzi / Environment / assetsDir assetsDir \u00b6 [jvm]\\ val assetsDir : String","title":"Assets dir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/assets-dir/#assetsdir","text":"[jvm]\\ val assetsDir : String","title":"assetsDir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/compile-sdk-version/","text":"// paparazzi / app.cash.paparazzi / Environment / compileSdkVersion compileSdkVersion \u00b6 [jvm]\\ val compileSdkVersion : Int","title":"Compile sdk version"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/compile-sdk-version/#compilesdkversion","text":"[jvm]\\ val compileSdkVersion : Int","title":"compileSdkVersion"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/package-name/","text":"// paparazzi / app.cash.paparazzi / Environment / packageName packageName \u00b6 [jvm]\\ val packageName : String","title":"Package name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/package-name/#packagename","text":"[jvm]\\ val packageName : String","title":"packageName"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/platform-data-dir/","text":"// paparazzi / app.cash.paparazzi / Environment / platformDataDir platformDataDir \u00b6 [jvm]\\ val platformDataDir : String","title":"Platform data dir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/platform-data-dir/#platformdatadir","text":"[jvm]\\ val platformDataDir : String","title":"platformDataDir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/platform-dir/","text":"// paparazzi / app.cash.paparazzi / Environment / platformDir platformDir \u00b6 [jvm]\\ val platformDir : String","title":"Platform dir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/platform-dir/#platformdir","text":"[jvm]\\ val platformDir : String","title":"platformDir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/res-dir/","text":"// paparazzi / app.cash.paparazzi / Environment / resDir resDir \u00b6 [jvm]\\ val resDir : String","title":"Res dir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/res-dir/#resdir","text":"[jvm]\\ val resDir : String","title":"resDir"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/resource-package-names/","text":"// paparazzi / app.cash.paparazzi / Environment / resourcePackageNames resourcePackageNames \u00b6 [jvm]\\ val resourcePackageNames : List < String >","title":"Resource package names"},{"location":"0.x/paparazzi/app.cash.paparazzi/-environment/resource-package-names/#resourcepackagenames","text":"[jvm]\\ val resourcePackageNames : List < String >","title":"resourcePackageNames"},{"location":"0.x/paparazzi/app.cash.paparazzi/-flags/","text":"// paparazzi / app.cash.paparazzi / Flags Flags \u00b6 [jvm]\\ object Flags Properties \u00b6 Name Summary DEBUG_LINKED_OBJECTS [jvm] const val DEBUG_LINKED_OBJECTS : String","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-flags/#flags","text":"[jvm]\\ object Flags","title":"Flags"},{"location":"0.x/paparazzi/app.cash.paparazzi/-flags/#properties","text":"Name Summary DEBUG_LINKED_OBJECTS [jvm] const val DEBUG_LINKED_OBJECTS : String","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-flags/-d-e-b-u-g_-l-i-n-k-e-d_-o-b-j-e-c-t-s/","text":"// paparazzi / app.cash.paparazzi / Flags / DEBUG_LINKED_OBJECTS DEBUG_LINKED_OBJECTS \u00b6 [jvm]\\ const val DEBUG_LINKED_OBJECTS : String","title":" d e b u g  l i n k e d  o b j e c t s"},{"location":"0.x/paparazzi/app.cash.paparazzi/-flags/-d-e-b-u-g_-l-i-n-k-e-d_-o-b-j-e-c-t-s/#debug_linked_objects","text":"[jvm]\\ const val DEBUG_LINKED_OBJECTS : String","title":"DEBUG_LINKED_OBJECTS"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/","text":"// paparazzi / app.cash.paparazzi / HtmlReportWriter HtmlReportWriter \u00b6 [jvm]\\ class HtmlReportWriter @ JvmOverloads constructor(runName: String , rootDirectory: File , snapshotRootDirectory: File ) : SnapshotHandler Creates an HTML report that avoids writing files that have already been written. Images and videos are named by hashes of their contents. Paparazzi won\u2019t write two images or videos with the same contents. Note that the images/ directory includes the individual frames of each video. Runs are named by their date. images\\ 088c60580f06efa95c37fd8e754074729ee74a06.png\\ 93f9a81cb594280f4b3898d90dfad8c8ea969b01.png\\ 22d37abd0841ba2a8d0bd635954baf7cbfaa269b.png\\ a4769e43cc5901ef28c0d46c46a44ea6429cbccc.png\\ videos\\ d1cddc5da2224053f2af51f4e69a76de4e61fc41.mov\\ runs\\ 20190626002322_b9854e.js\\ 20190626002345_b1e882.js\\ index.html\\ index.js\\ paparazzi.js Constructors \u00b6 HtmlReportWriter [jvm] @ JvmOverloads fun HtmlReportWriter (runName: String = defaultRunName(), rootDirectory: File = File(\u201cbuild/reports/paparazzi\u201d), snapshotRootDirectory: File = File(\u201csrc/test/snapshots\u201d)) Functions \u00b6 Name Summary close [jvm] open override fun close () Release all resources and block until everything has been written to the file system. newFrameHandler [jvm] open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/#htmlreportwriter","text":"[jvm]\\ class HtmlReportWriter @ JvmOverloads constructor(runName: String , rootDirectory: File , snapshotRootDirectory: File ) : SnapshotHandler Creates an HTML report that avoids writing files that have already been written. Images and videos are named by hashes of their contents. Paparazzi won\u2019t write two images or videos with the same contents. Note that the images/ directory includes the individual frames of each video. Runs are named by their date. images\\ 088c60580f06efa95c37fd8e754074729ee74a06.png\\ 93f9a81cb594280f4b3898d90dfad8c8ea969b01.png\\ 22d37abd0841ba2a8d0bd635954baf7cbfaa269b.png\\ a4769e43cc5901ef28c0d46c46a44ea6429cbccc.png\\ videos\\ d1cddc5da2224053f2af51f4e69a76de4e61fc41.mov\\ runs\\ 20190626002322_b9854e.js\\ 20190626002345_b1e882.js\\ index.html\\ index.js\\ paparazzi.js","title":"HtmlReportWriter"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/#constructors","text":"HtmlReportWriter [jvm] @ JvmOverloads fun HtmlReportWriter (runName: String = defaultRunName(), rootDirectory: File = File(\u201cbuild/reports/paparazzi\u201d), snapshotRootDirectory: File = File(\u201csrc/test/snapshots\u201d))","title":"Constructors"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/#functions","text":"Name Summary close [jvm] open override fun close () Release all resources and block until everything has been written to the file system. newFrameHandler [jvm] open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/-html-report-writer/","text":"// paparazzi / app.cash.paparazzi / HtmlReportWriter / HtmlReportWriter HtmlReportWriter \u00b6 [jvm]\\ @ JvmOverloads fun HtmlReportWriter (runName: String = defaultRunName(), rootDirectory: File = File(\u201cbuild/reports/paparazzi\u201d), snapshotRootDirectory: File = File(\u201csrc/test/snapshots\u201d))","title":" html report writer"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/-html-report-writer/#htmlreportwriter","text":"[jvm]\\ @ JvmOverloads fun HtmlReportWriter (runName: String = defaultRunName(), rootDirectory: File = File(\u201cbuild/reports/paparazzi\u201d), snapshotRootDirectory: File = File(\u201csrc/test/snapshots\u201d))","title":"HtmlReportWriter"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/close/","text":"// paparazzi / app.cash.paparazzi / HtmlReportWriter / close close \u00b6 [jvm]\\ open override fun close () Release all resources and block until everything has been written to the file system.","title":"Close"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/close/#close","text":"[jvm]\\ open override fun close () Release all resources and block until everything has been written to the file system.","title":"close"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/new-frame-handler/","text":"// paparazzi / app.cash.paparazzi / HtmlReportWriter / newFrameHandler newFrameHandler \u00b6 [jvm]\\ open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"New frame handler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-html-report-writer/new-frame-handler/#newframehandler","text":"[jvm]\\ open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"newFrameHandler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/","text":"// paparazzi / app.cash.paparazzi / Paparazzi Paparazzi \u00b6 [jvm]\\ class Paparazzi @ JvmOverloads constructor(environment: Environment , deviceConfig: DeviceConfig , theme: String , renderingMode: SessionParams.RenderingMode, appCompatEnabled: Boolean , maxPercentDifference: Double , snapshotHandler: SnapshotHandler , renderExtensions: Set < RenderExtension >) : TestRule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary apply [jvm] open override fun apply (base: Statement, description: Description): Statement close [jvm] fun close () gif [jvm] @ JvmOverloads fun gif (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null, start: Long = 0L, end: Long = 500L, fps: Int = 30) inflate [jvm] fun < V : View> inflate (@LayoutReslayoutId: Int ): V prepare [jvm] fun prepare (description: Description) snapshot [jvm] @ JvmOverloads fun snapshot (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null) Properties \u00b6 Name Summary context [jvm] val context : Context layoutInflater [jvm] val layoutInflater : LayoutInflater resources [jvm] val resources : Resources","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/#paparazzi","text":"[jvm]\\ class Paparazzi @ JvmOverloads constructor(environment: Environment , deviceConfig: DeviceConfig , theme: String , renderingMode: SessionParams.RenderingMode, appCompatEnabled: Boolean , maxPercentDifference: Double , snapshotHandler: SnapshotHandler , renderExtensions: Set < RenderExtension >) : TestRule","title":"Paparazzi"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/#functions","text":"Name Summary apply [jvm] open override fun apply (base: Statement, description: Description): Statement close [jvm] fun close () gif [jvm] @ JvmOverloads fun gif (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null, start: Long = 0L, end: Long = 500L, fps: Int = 30) inflate [jvm] fun < V : View> inflate (@LayoutReslayoutId: Int ): V prepare [jvm] fun prepare (description: Description) snapshot [jvm] @ JvmOverloads fun snapshot (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null)","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/#properties","text":"Name Summary context [jvm] val context : Context layoutInflater [jvm] val layoutInflater : LayoutInflater resources [jvm] val resources : Resources","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/-paparazzi/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / Paparazzi Paparazzi \u00b6 [jvm]\\ @ JvmOverloads fun Paparazzi (environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \u201candroid:Theme.Material.NoActionBar.Fullscreen\u201d, renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set < RenderExtension > = setOf())","title":" paparazzi"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/-paparazzi/#paparazzi","text":"[jvm]\\ @ JvmOverloads fun Paparazzi (environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \u201candroid:Theme.Material.NoActionBar.Fullscreen\u201d, renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set < RenderExtension > = setOf())","title":"Paparazzi"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/apply/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / apply apply \u00b6 [jvm]\\ open override fun apply (base: Statement, description: Description): Statement","title":"Apply"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/apply/#apply","text":"[jvm]\\ open override fun apply (base: Statement, description: Description): Statement","title":"apply"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/close/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / close close \u00b6 [jvm]\\ fun close ()","title":"Close"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/close/#close","text":"[jvm]\\ fun close ()","title":"close"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/context/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / context context \u00b6 [jvm]\\ val context : Context","title":"Context"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/context/#context","text":"[jvm]\\ val context : Context","title":"context"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/gif/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / gif gif \u00b6 [jvm]\\ @ JvmOverloads fun gif (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null, start: Long = 0L, end: Long = 500L, fps: Int = 30)","title":"Gif"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/gif/#gif","text":"[jvm]\\ @ JvmOverloads fun gif (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null, start: Long = 0L, end: Long = 500L, fps: Int = 30)","title":"gif"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/inflate/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / inflate inflate \u00b6 [jvm]\\ fun < V : View> inflate (@LayoutReslayoutId: Int ): V","title":"Inflate"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/inflate/#inflate","text":"[jvm]\\ fun < V : View> inflate (@LayoutReslayoutId: Int ): V","title":"inflate"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/layout-inflater/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / layoutInflater layoutInflater \u00b6 [jvm]\\ val layoutInflater : LayoutInflater","title":"Layout inflater"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/layout-inflater/#layoutinflater","text":"[jvm]\\ val layoutInflater : LayoutInflater","title":"layoutInflater"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/prepare/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / prepare prepare \u00b6 [jvm]\\ fun prepare (description: Description)","title":"Prepare"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/prepare/#prepare","text":"[jvm]\\ fun prepare (description: Description)","title":"prepare"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/resources/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / resources resources \u00b6 [jvm]\\ val resources : Resources","title":"Resources"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/resources/#resources","text":"[jvm]\\ val resources : Resources","title":"resources"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/snapshot/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / snapshot snapshot \u00b6 [jvm]\\ @ JvmOverloads fun snapshot (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null)","title":"Snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/snapshot/#snapshot","text":"[jvm]\\ @ JvmOverloads fun snapshot (view: View, name: String ? = null, deviceConfig: DeviceConfig ? = null, theme: String ? = null, renderingMode: SessionParams.RenderingMode? = null)","title":"snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/-companion/","text":"// paparazzi / app.cash.paparazzi / Paparazzi / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-paparazzi/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/paparazzi/app.cash.paparazzi/-render-extension/","text":"// paparazzi / app.cash.paparazzi / RenderExtension RenderExtension \u00b6 [jvm]\\ interface RenderExtension An extension for overlaying additional information on top of each rendered frame. Functions \u00b6 Name Summary renderView [jvm] abstract fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView . Inheritors \u00b6 Name AccessibilityRenderExtension","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-render-extension/#renderextension","text":"[jvm]\\ interface RenderExtension An extension for overlaying additional information on top of each rendered frame.","title":"RenderExtension"},{"location":"0.x/paparazzi/app.cash.paparazzi/-render-extension/#functions","text":"Name Summary renderView [jvm] abstract fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView .","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/-render-extension/#inheritors","text":"Name AccessibilityRenderExtension","title":"Inheritors"},{"location":"0.x/paparazzi/app.cash.paparazzi/-render-extension/render-view/","text":"// paparazzi / app.cash.paparazzi / RenderExtension / renderView renderView \u00b6 [jvm]\\ abstract fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView . Returns the root view of the modified hierarchy.","title":"Render view"},{"location":"0.x/paparazzi/app.cash.paparazzi/-render-extension/render-view/#renderview","text":"[jvm]\\ abstract fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView . Returns the root view of the modified hierarchy.","title":"renderView"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/","text":"// paparazzi / app.cash.paparazzi / Snapshot Snapshot \u00b6 [jvm]\\ @JsonClass(generateAdapter = true) data class Snapshot (name: String ?, testName: TestName , timestamp: Date , tags: List < String >, file: String ?) Properties \u00b6 Name Summary file [jvm] val file : String ? = null name [jvm] val name : String ? tags [jvm] val tags : List < String > testName [jvm] val testName : TestName timestamp [jvm] val timestamp : Date","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/#snapshot","text":"[jvm]\\ @JsonClass(generateAdapter = true) data class Snapshot (name: String ?, testName: TestName , timestamp: Date , tags: List < String >, file: String ?)","title":"Snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/#properties","text":"Name Summary file [jvm] val file : String ? = null name [jvm] val name : String ? tags [jvm] val tags : List < String > testName [jvm] val testName : TestName timestamp [jvm] val timestamp : Date","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/-snapshot/","text":"// paparazzi / app.cash.paparazzi / Snapshot / Snapshot Snapshot \u00b6 [jvm]\\ fun Snapshot (name: String ?, testName: TestName , timestamp: Date , tags: List < String > = listOf(), file: String ? = null)","title":" snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/-snapshot/#snapshot","text":"[jvm]\\ fun Snapshot (name: String ?, testName: TestName , timestamp: Date , tags: List < String > = listOf(), file: String ? = null)","title":"Snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/file/","text":"// paparazzi / app.cash.paparazzi / Snapshot / file file \u00b6 [jvm]\\ val file : String ? = null","title":"File"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/file/#file","text":"[jvm]\\ val file : String ? = null","title":"file"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/name/","text":"// paparazzi / app.cash.paparazzi / Snapshot / name name \u00b6 [jvm]\\ val name : String ?","title":"Name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/name/#name","text":"[jvm]\\ val name : String ?","title":"name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/tags/","text":"// paparazzi / app.cash.paparazzi / Snapshot / tags tags \u00b6 [jvm]\\ val tags : List < String >","title":"Tags"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/tags/#tags","text":"[jvm]\\ val tags : List < String >","title":"tags"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/test-name/","text":"// paparazzi / app.cash.paparazzi / Snapshot / testName testName \u00b6 [jvm]\\ val testName : TestName","title":"Test name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/test-name/#testname","text":"[jvm]\\ val testName : TestName","title":"testName"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/timestamp/","text":"// paparazzi / app.cash.paparazzi / Snapshot / timestamp timestamp \u00b6 [jvm]\\ val timestamp : Date","title":"Timestamp"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot/timestamp/#timestamp","text":"[jvm]\\ val timestamp : Date","title":"timestamp"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/","text":"// paparazzi / app.cash.paparazzi / SnapshotHandler SnapshotHandler \u00b6 [jvm]\\ interface SnapshotHandler : Closeable Types \u00b6 Name Summary FrameHandler [jvm] interface FrameHandler : Closeable Functions \u00b6 Name Summary close [jvm] abstract override fun close () newFrameHandler [jvm] abstract fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler Inheritors \u00b6 Name HtmlReportWriter SnapshotVerifier","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#snapshothandler","text":"[jvm]\\ interface SnapshotHandler : Closeable","title":"SnapshotHandler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#types","text":"Name Summary FrameHandler [jvm] interface FrameHandler : Closeable","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#functions","text":"Name Summary close [jvm] abstract override fun close () newFrameHandler [jvm] abstract fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#inheritors","text":"Name HtmlReportWriter SnapshotVerifier","title":"Inheritors"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/new-frame-handler/","text":"// paparazzi / app.cash.paparazzi / SnapshotHandler / newFrameHandler newFrameHandler \u00b6 [jvm]\\ abstract fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"New frame handler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/new-frame-handler/#newframehandler","text":"[jvm]\\ abstract fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"newFrameHandler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/","text":"// paparazzi / app.cash.paparazzi / SnapshotHandler / FrameHandler FrameHandler \u00b6 [jvm]\\ interface FrameHandler : Closeable Functions \u00b6 Name Summary close [jvm] abstract override fun close () handle [jvm] abstract fun handle (image: BufferedImage )","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/#framehandler","text":"[jvm]\\ interface FrameHandler : Closeable","title":"FrameHandler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/#functions","text":"Name Summary close [jvm] abstract override fun close () handle [jvm] abstract fun handle (image: BufferedImage )","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/handle/","text":"// paparazzi / app.cash.paparazzi / SnapshotHandler / FrameHandler / handle handle \u00b6 [jvm]\\ abstract fun handle (image: BufferedImage )","title":"Handle"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/handle/#handle","text":"[jvm]\\ abstract fun handle (image: BufferedImage )","title":"handle"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/","text":"// paparazzi / app.cash.paparazzi / SnapshotVerifier SnapshotVerifier \u00b6 [jvm]\\ class SnapshotVerifier @ JvmOverloads constructor(maxPercentDifference: Double , rootDirectory: File ) : SnapshotHandler Functions \u00b6 Name Summary close [jvm] open override fun close () newFrameHandler [jvm] open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#snapshotverifier","text":"[jvm]\\ class SnapshotVerifier @ JvmOverloads constructor(maxPercentDifference: Double , rootDirectory: File ) : SnapshotHandler","title":"SnapshotVerifier"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#functions","text":"Name Summary close [jvm] open override fun close () newFrameHandler [jvm] open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/-snapshot-verifier/","text":"// paparazzi / app.cash.paparazzi / SnapshotVerifier / SnapshotVerifier SnapshotVerifier \u00b6 [jvm]\\ @ JvmOverloads fun SnapshotVerifier (maxPercentDifference: Double , rootDirectory: File = File(\u201csrc/test/snapshots\u201d))","title":" snapshot verifier"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/-snapshot-verifier/#snapshotverifier","text":"[jvm]\\ @ JvmOverloads fun SnapshotVerifier (maxPercentDifference: Double , rootDirectory: File = File(\u201csrc/test/snapshots\u201d))","title":"SnapshotVerifier"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/close/","text":"// paparazzi / app.cash.paparazzi / SnapshotVerifier / close close \u00b6 [jvm]\\ open override fun close ()","title":"Close"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/close/#close","text":"[jvm]\\ open override fun close ()","title":"close"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/new-frame-handler/","text":"// paparazzi / app.cash.paparazzi / SnapshotVerifier / newFrameHandler newFrameHandler \u00b6 [jvm]\\ open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"New frame handler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/new-frame-handler/#newframehandler","text":"[jvm]\\ open override fun newFrameHandler (snapshot: Snapshot , frameCount: Int , fps: Int ): SnapshotHandler.FrameHandler","title":"newFrameHandler"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/","text":"// paparazzi / app.cash.paparazzi / TestName TestName \u00b6 [jvm]\\ data class TestName (packageName: String , className: String , methodName: String ) Properties \u00b6 Name Summary className [jvm] val className : String methodName [jvm] val methodName : String packageName [jvm] val packageName : String","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/#testname","text":"[jvm]\\ data class TestName (packageName: String , className: String , methodName: String )","title":"TestName"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/#properties","text":"Name Summary className [jvm] val className : String methodName [jvm] val methodName : String packageName [jvm] val packageName : String","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/-test-name/","text":"// paparazzi / app.cash.paparazzi / TestName / TestName TestName \u00b6 [jvm]\\ fun TestName (packageName: String , className: String , methodName: String )","title":" test name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/-test-name/#testname","text":"[jvm]\\ fun TestName (packageName: String , className: String , methodName: String )","title":"TestName"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/class-name/","text":"// paparazzi / app.cash.paparazzi / TestName / className className \u00b6 [jvm]\\ val className : String","title":"Class name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/class-name/#classname","text":"[jvm]\\ val className : String","title":"className"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/method-name/","text":"// paparazzi / app.cash.paparazzi / TestName / methodName methodName \u00b6 [jvm]\\ val methodName : String","title":"Method name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/method-name/#methodname","text":"[jvm]\\ val methodName : String","title":"methodName"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/package-name/","text":"// paparazzi / app.cash.paparazzi / TestName / packageName packageName \u00b6 [jvm]\\ val packageName : String","title":"Package name"},{"location":"0.x/paparazzi/app.cash.paparazzi/-test-name/package-name/#packagename","text":"[jvm]\\ val packageName : String","title":"packageName"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/","text":"// paparazzi / app.cash.paparazzi.accessibility Package app.cash.paparazzi.accessibility \u00b6 Types \u00b6 Name Summary AccessibilityRenderExtension [jvm] class AccessibilityRenderExtension : RenderExtension","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/#package-appcashpaparazziaccessibility","text":"","title":"Package app.cash.paparazzi.accessibility"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/#types","text":"Name Summary AccessibilityRenderExtension [jvm] class AccessibilityRenderExtension : RenderExtension","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/","text":"// paparazzi / app.cash.paparazzi.accessibility / AccessibilityRenderExtension AccessibilityRenderExtension \u00b6 [jvm]\\ class AccessibilityRenderExtension : RenderExtension Functions \u00b6 Name Summary renderView [jvm] open override fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView .","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#accessibilityrenderextension","text":"[jvm]\\ class AccessibilityRenderExtension : RenderExtension","title":"AccessibilityRenderExtension"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#functions","text":"Name Summary renderView [jvm] open override fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView .","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/-accessibility-render-extension/","text":"// paparazzi / app.cash.paparazzi.accessibility / AccessibilityRenderExtension / AccessibilityRenderExtension AccessibilityRenderExtension \u00b6 [jvm]\\ fun AccessibilityRenderExtension ()","title":" accessibility render extension"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/-accessibility-render-extension/#accessibilityrenderextension","text":"[jvm]\\ fun AccessibilityRenderExtension ()","title":"AccessibilityRenderExtension"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/render-view/","text":"// paparazzi / app.cash.paparazzi.accessibility / AccessibilityRenderExtension / renderView renderView \u00b6 [jvm]\\ open override fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView . Returns the root view of the modified hierarchy.","title":"Render view"},{"location":"0.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/render-view/#renderview","text":"[jvm]\\ open override fun renderView (contentView: View): View Allows this extension to modify the view hierarchy represented by contentView . Returns the root view of the modified hierarchy.","title":"renderView"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/","text":"// paparazzi / app.cash.paparazzi.internal Package app.cash.paparazzi.internal \u00b6 Types \u00b6 Name Summary EditModeInterceptor [jvm] object EditModeInterceptor MatrixMatrixMultiplicationInterceptor [jvm] object MatrixMatrixMultiplicationInterceptor MatrixVectorMultiplicationInterceptor [jvm] object MatrixVectorMultiplicationInterceptor ResourcesInterceptor [jvm] object ResourcesInterceptor","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/#package-appcashpaparazziinternal","text":"","title":"Package app.cash.paparazzi.internal"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/#types","text":"Name Summary EditModeInterceptor [jvm] object EditModeInterceptor MatrixMatrixMultiplicationInterceptor [jvm] object MatrixMatrixMultiplicationInterceptor MatrixVectorMultiplicationInterceptor [jvm] object MatrixVectorMultiplicationInterceptor ResourcesInterceptor [jvm] object ResourcesInterceptor","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-edit-mode-interceptor/","text":"// paparazzi / app.cash.paparazzi.internal / EditModeInterceptor EditModeInterceptor \u00b6 [jvm]\\ object EditModeInterceptor Functions \u00b6 Name Summary intercept [jvm] @ JvmStatic fun intercept (): Boolean","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-edit-mode-interceptor/#editmodeinterceptor","text":"[jvm]\\ object EditModeInterceptor","title":"EditModeInterceptor"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-edit-mode-interceptor/#functions","text":"Name Summary intercept [jvm] @ JvmStatic fun intercept (): Boolean","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-edit-mode-interceptor/intercept/","text":"// paparazzi / app.cash.paparazzi.internal / EditModeInterceptor / intercept intercept \u00b6 [jvm]\\ @ JvmStatic fun intercept (): Boolean","title":"Intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-edit-mode-interceptor/intercept/#intercept","text":"[jvm]\\ @ JvmStatic fun intercept (): Boolean","title":"intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-matrix-multiplication-interceptor/","text":"// paparazzi / app.cash.paparazzi.internal / MatrixMatrixMultiplicationInterceptor MatrixMatrixMultiplicationInterceptor \u00b6 [jvm]\\ object MatrixMatrixMultiplicationInterceptor Functions \u00b6 Name Summary intercept [jvm] @ JvmStatic fun intercept (result: FloatArray , resultOffset: Int , lhs: FloatArray , lhsOffset: Int , rhs: FloatArray , rhsOffset: Int )","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-matrix-multiplication-interceptor/#matrixmatrixmultiplicationinterceptor","text":"[jvm]\\ object MatrixMatrixMultiplicationInterceptor","title":"MatrixMatrixMultiplicationInterceptor"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-matrix-multiplication-interceptor/#functions","text":"Name Summary intercept [jvm] @ JvmStatic fun intercept (result: FloatArray , resultOffset: Int , lhs: FloatArray , lhsOffset: Int , rhs: FloatArray , rhsOffset: Int )","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-matrix-multiplication-interceptor/intercept/","text":"// paparazzi / app.cash.paparazzi.internal / MatrixMatrixMultiplicationInterceptor / intercept intercept \u00b6 [jvm]\\ @ JvmStatic fun intercept (result: FloatArray , resultOffset: Int , lhs: FloatArray , lhsOffset: Int , rhs: FloatArray , rhsOffset: Int )","title":"Intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-matrix-multiplication-interceptor/intercept/#intercept","text":"[jvm]\\ @ JvmStatic fun intercept (result: FloatArray , resultOffset: Int , lhs: FloatArray , lhsOffset: Int , rhs: FloatArray , rhsOffset: Int )","title":"intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-vector-multiplication-interceptor/","text":"// paparazzi / app.cash.paparazzi.internal / MatrixVectorMultiplicationInterceptor MatrixVectorMultiplicationInterceptor \u00b6 [jvm]\\ object MatrixVectorMultiplicationInterceptor Functions \u00b6 Name Summary intercept [jvm] @ JvmStatic fun intercept (resultVec: FloatArray , resultVecOffset: Int , lhsMat: FloatArray , lhsMatOffset: Int , rhsVec: FloatArray , rhsVecOffset: Int )","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-vector-multiplication-interceptor/#matrixvectormultiplicationinterceptor","text":"[jvm]\\ object MatrixVectorMultiplicationInterceptor","title":"MatrixVectorMultiplicationInterceptor"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-vector-multiplication-interceptor/#functions","text":"Name Summary intercept [jvm] @ JvmStatic fun intercept (resultVec: FloatArray , resultVecOffset: Int , lhsMat: FloatArray , lhsMatOffset: Int , rhsVec: FloatArray , rhsVecOffset: Int )","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-vector-multiplication-interceptor/intercept/","text":"// paparazzi / app.cash.paparazzi.internal / MatrixVectorMultiplicationInterceptor / intercept intercept \u00b6 [jvm]\\ @ JvmStatic fun intercept (resultVec: FloatArray , resultVecOffset: Int , lhsMat: FloatArray , lhsMatOffset: Int , rhsVec: FloatArray , rhsVecOffset: Int )","title":"Intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-matrix-vector-multiplication-interceptor/intercept/#intercept","text":"[jvm]\\ @ JvmStatic fun intercept (resultVec: FloatArray , resultVecOffset: Int , lhsMat: FloatArray , lhsMatOffset: Int , rhsVec: FloatArray , rhsVecOffset: Int )","title":"intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-resources-interceptor/","text":"// paparazzi / app.cash.paparazzi.internal / ResourcesInterceptor ResourcesInterceptor \u00b6 [jvm]\\ object ResourcesInterceptor Functions \u00b6 Name Summary intercept [jvm] @ JvmStatic fun intercept (context: Context, resId: Int ): Typeface?","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-resources-interceptor/#resourcesinterceptor","text":"[jvm]\\ object ResourcesInterceptor","title":"ResourcesInterceptor"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-resources-interceptor/#functions","text":"Name Summary intercept [jvm] @ JvmStatic fun intercept (context: Context, resId: Int ): Typeface?","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-resources-interceptor/intercept/","text":"// paparazzi / app.cash.paparazzi.internal / ResourcesInterceptor / intercept intercept \u00b6 [jvm]\\ @ JvmStatic fun intercept (context: Context, resId: Int ): Typeface?","title":"Intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal/-resources-interceptor/intercept/#intercept","text":"[jvm]\\ @ JvmStatic fun intercept (context: Context, resId: Int ): Typeface?","title":"intercept"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/","text":"// paparazzi / app.cash.paparazzi.internal.parsers Package app.cash.paparazzi.internal.parsers \u00b6 Types \u00b6 Name Summary AaptAttrParser [jvm] interface AaptAttrParser Copied from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/AaptAttrParser.java AaptAttrSnapshot [jvm] class AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot ) : AttributeSnapshot Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AaptAttrAttributeSnapshot.java AttributeSnapshot [jvm] open class AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AttributeSnapshot.java InMemoryParser [jvm] abstract class InMemoryParser : KXmlParser Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/LayoutPullParser.java;bpv=0;bpt=0 ResourceParser [jvm] class ResourceParser (inputStream: InputStream ) : KXmlParser An XML resource parser that creates a tree of TagSnapshot s TagSnapshot [jvm] data class TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/TagSnapshot.java","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/#package-appcashpaparazziinternalparsers","text":"","title":"Package app.cash.paparazzi.internal.parsers"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/#types","text":"Name Summary AaptAttrParser [jvm] interface AaptAttrParser Copied from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/AaptAttrParser.java AaptAttrSnapshot [jvm] class AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot ) : AttributeSnapshot Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AaptAttrAttributeSnapshot.java AttributeSnapshot [jvm] open class AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AttributeSnapshot.java InMemoryParser [jvm] abstract class InMemoryParser : KXmlParser Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/LayoutPullParser.java;bpv=0;bpt=0 ResourceParser [jvm] class ResourceParser (inputStream: InputStream ) : KXmlParser An XML resource parser that creates a tree of TagSnapshot s TagSnapshot [jvm] data class TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/TagSnapshot.java","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrParser AaptAttrParser \u00b6 [jvm]\\ interface AaptAttrParser Copied from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/AaptAttrParser.java Interface for parsers that support declaration of inlined {@code aapt:attr} attributes Functions \u00b6 Name Summary getAaptDeclaredAttrs [jvm] abstract fun getAaptDeclaredAttrs (): Map < String , TagSnapshot > Returns a Map that contains all the aapt:attr elements declared in this or any children parsers. This list can be used to resolve @aapt/_aapt references into this parser.","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/#aaptattrparser","text":"[jvm]\\ interface AaptAttrParser Copied from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/AaptAttrParser.java Interface for parsers that support declaration of inlined {@code aapt:attr} attributes","title":"AaptAttrParser"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/#functions","text":"Name Summary getAaptDeclaredAttrs [jvm] abstract fun getAaptDeclaredAttrs (): Map < String , TagSnapshot > Returns a Map that contains all the aapt:attr elements declared in this or any children parsers. This list can be used to resolve @aapt/_aapt references into this parser.","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/get-aapt-declared-attrs/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrParser / getAaptDeclaredAttrs getAaptDeclaredAttrs \u00b6 [jvm]\\ abstract fun getAaptDeclaredAttrs (): Map < String , TagSnapshot > Returns a Map that contains all the aapt:attr elements declared in this or any children parsers. This list can be used to resolve @aapt/_aapt references into this parser.","title":"Get aapt declared attrs"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/get-aapt-declared-attrs/#getaaptdeclaredattrs","text":"[jvm]\\ abstract fun getAaptDeclaredAttrs (): Map < String , TagSnapshot > Returns a Map that contains all the aapt:attr elements declared in this or any children parsers. This list can be used to resolve @aapt/_aapt references into this parser.","title":"getAaptDeclaredAttrs"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrSnapshot AaptAttrSnapshot \u00b6 [jvm]\\ class AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot ) : AttributeSnapshot Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AaptAttrAttributeSnapshot.java Aapt attributes are attributes that instead of containing a reference, contain the inlined value of the reference. This snapshot will generate a dynamic reference that will be used by the resource resolution to be able to retrieve the inlined value. Constructors \u00b6 AaptAttrSnapshot [jvm] fun AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot ) Functions \u00b6 Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary bundledTag [jvm] val bundledTag : TagSnapshot id [jvm] val id : String name [jvm] open override val name : String namespace [jvm] open override val namespace : String prefix [jvm] open override val prefix : String value [jvm] open val value : String","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#aaptattrsnapshot","text":"[jvm]\\ class AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot ) : AttributeSnapshot Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AaptAttrAttributeSnapshot.java Aapt attributes are attributes that instead of containing a reference, contain the inlined value of the reference. This snapshot will generate a dynamic reference that will be used by the resource resolution to be able to retrieve the inlined value.","title":"AaptAttrSnapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#constructors","text":"AaptAttrSnapshot [jvm] fun AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot )","title":"Constructors"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#functions","text":"Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#properties","text":"Name Summary bundledTag [jvm] val bundledTag : TagSnapshot id [jvm] val id : String name [jvm] open override val name : String namespace [jvm] open override val namespace : String prefix [jvm] open override val prefix : String value [jvm] open val value : String","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/-aapt-attr-snapshot/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrSnapshot / AaptAttrSnapshot AaptAttrSnapshot \u00b6 [jvm]\\ fun AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot )","title":" aapt attr snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/-aapt-attr-snapshot/#aaptattrsnapshot","text":"[jvm]\\ fun AaptAttrSnapshot (namespace: String , prefix: String , name: String , id: String , bundledTag: TagSnapshot )","title":"AaptAttrSnapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/bundled-tag/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrSnapshot / bundledTag bundledTag \u00b6 [jvm]\\ val bundledTag : TagSnapshot","title":"Bundled tag"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/bundled-tag/#bundledtag","text":"[jvm]\\ val bundledTag : TagSnapshot","title":"bundledTag"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/id/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrSnapshot / id id \u00b6 [jvm]\\ val id : String","title":"Id"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/id/#id","text":"[jvm]\\ val id : String","title":"id"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/name/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrSnapshot / name name \u00b6 [jvm]\\ open override val name : String","title":"Name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/name/#name","text":"[jvm]\\ open override val name : String","title":"name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/namespace/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrSnapshot / namespace namespace \u00b6 [jvm]\\ open override val namespace : String","title":"Namespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/namespace/#namespace","text":"[jvm]\\ open override val namespace : String","title":"namespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/prefix/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AaptAttrSnapshot / prefix prefix \u00b6 [jvm]\\ open override val prefix : String","title":"Prefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/prefix/#prefix","text":"[jvm]\\ open override val prefix : String","title":"prefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot AttributeSnapshot \u00b6 [jvm]\\ open class AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AttributeSnapshot.java A snapshot of an attribute value pulled from an XML resource. Used in conjunction with TagSnapshot . Constructors \u00b6 AttributeSnapshot [jvm] fun AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String ) Functions \u00b6 Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary name [jvm] open val name : String namespace [jvm] open val namespace : String prefix [jvm] open val prefix : String ? value [jvm] open val value : String Inheritors \u00b6 Name AaptAttrSnapshot","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#attributesnapshot","text":"[jvm]\\ open class AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AttributeSnapshot.java A snapshot of an attribute value pulled from an XML resource. Used in conjunction with TagSnapshot .","title":"AttributeSnapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#constructors","text":"AttributeSnapshot [jvm] fun AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String )","title":"Constructors"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#functions","text":"Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#properties","text":"Name Summary name [jvm] open val name : String namespace [jvm] open val namespace : String prefix [jvm] open val prefix : String ? value [jvm] open val value : String","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#inheritors","text":"Name AaptAttrSnapshot","title":"Inheritors"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/-attribute-snapshot/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / AttributeSnapshot AttributeSnapshot \u00b6 [jvm]\\ fun AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String )","title":" attribute snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/-attribute-snapshot/#attributesnapshot","text":"[jvm]\\ fun AttributeSnapshot (namespace: String , prefix: String ?, name: String , value: String )","title":"AttributeSnapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/equals/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / equals equals \u00b6 [jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/equals/#equals","text":"[jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/hash-code/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / hashCode hashCode \u00b6 [jvm]\\ open override fun hashCode (): Int","title":"Hash code"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/hash-code/#hashcode","text":"[jvm]\\ open override fun hashCode (): Int","title":"hashCode"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/name/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / name name \u00b6 [jvm]\\ open val name : String","title":"Name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/name/#name","text":"[jvm]\\ open val name : String","title":"name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/namespace/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / namespace namespace \u00b6 [jvm]\\ open val namespace : String","title":"Namespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/namespace/#namespace","text":"[jvm]\\ open val namespace : String","title":"namespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/prefix/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / prefix prefix \u00b6 [jvm]\\ open val prefix : String ?","title":"Prefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/prefix/#prefix","text":"[jvm]\\ open val prefix : String ?","title":"prefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/to-string/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/value/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / AttributeSnapshot / value value \u00b6 [jvm]\\ open val value : String","title":"Value"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/value/#value","text":"[jvm]\\ open val value : String","title":"value"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser InMemoryParser \u00b6 [jvm]\\ abstract class InMemoryParser : KXmlParser Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/LayoutPullParser.java;bpv=0;bpt=0 A parser implementation that walks an in-memory XML DOM tree. Constructors \u00b6 InMemoryParser [jvm] fun InMemoryParser () Functions \u00b6 Name Summary defineEntityReplacementText [jvm] open override fun defineEntityReplacementText (p0: String , p1: String ) getAttributeCount [jvm] open override fun getAttributeCount (): Int getAttributeName [jvm] open override fun getAttributeName (i: Int ): String ? getAttributeNamespace [jvm] open override fun getAttributeNamespace (i: Int ): String getAttributePrefix [jvm] open override fun getAttributePrefix (i: Int ): String ? getAttributeType [jvm] open override fun getAttributeType (p0: Int ): String getAttributeValue [jvm] open override fun getAttributeValue (i: Int ): String ? open override fun getAttributeValue (namespace: String ?, name: String ?): String ? getColumnNumber [jvm] open override fun getColumnNumber (): Int getDepth [jvm] open override fun getDepth (): Int getEventType [jvm] open override fun getEventType (): Int getFeature [jvm] open override fun getFeature (p0: String ): Boolean getInputEncoding [jvm] open override fun getInputEncoding (): String getLineNumber [jvm] open override fun getLineNumber (): Int getName [jvm] open override fun getName (): String ? getNamespace [jvm] open override fun getNamespace (): String open override fun getNamespace (p0: String ): String getNamespaceCount [jvm] open override fun getNamespaceCount (p0: Int ): Int getNamespacePrefix [jvm] open override fun getNamespacePrefix (p0: Int ): String getNamespaceUri [jvm] open override fun getNamespaceUri (p0: Int ): String getPositionDescription [jvm] open override fun getPositionDescription (): String getPrefix [jvm] open override fun getPrefix (): String getProperty [jvm] open override fun getProperty (p0: String ): Any getText [jvm] open override fun getText (): String getTextCharacters [jvm] open override fun getTextCharacters (p0: IntArray ): CharArray isAttributeDefault [jvm] open override fun isAttributeDefault (p0: Int ): Boolean isEmptyElementTag [jvm] open override fun isEmptyElementTag (): Boolean isWhitespace [jvm] open override fun isWhitespace (): Boolean next [jvm] open operator override fun next (): Int nextTag [jvm] open override fun nextTag (): Int nextText [jvm] open override fun nextText (): String nextToken [jvm] open override fun nextToken (): Int require [jvm] open override fun require (p0: Int , p1: String , p2: String ) rootTag [jvm] abstract fun rootTag (): TagSnapshot setFeature [jvm] open override fun setFeature (p0: String , p1: Boolean ) setInput [jvm] open override fun setInput (p0: Reader ) open override fun setInput (p0: InputStream , p1: String ) setProperty [jvm] open override fun setProperty (p0: String , p1: Any ) skipSubTree [jvm] open fun skipSubTree ()","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/#inmemoryparser","text":"[jvm]\\ abstract class InMemoryParser : KXmlParser Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/LayoutPullParser.java;bpv=0;bpt=0 A parser implementation that walks an in-memory XML DOM tree.","title":"InMemoryParser"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/#constructors","text":"InMemoryParser [jvm] fun InMemoryParser ()","title":"Constructors"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/#functions","text":"Name Summary defineEntityReplacementText [jvm] open override fun defineEntityReplacementText (p0: String , p1: String ) getAttributeCount [jvm] open override fun getAttributeCount (): Int getAttributeName [jvm] open override fun getAttributeName (i: Int ): String ? getAttributeNamespace [jvm] open override fun getAttributeNamespace (i: Int ): String getAttributePrefix [jvm] open override fun getAttributePrefix (i: Int ): String ? getAttributeType [jvm] open override fun getAttributeType (p0: Int ): String getAttributeValue [jvm] open override fun getAttributeValue (i: Int ): String ? open override fun getAttributeValue (namespace: String ?, name: String ?): String ? getColumnNumber [jvm] open override fun getColumnNumber (): Int getDepth [jvm] open override fun getDepth (): Int getEventType [jvm] open override fun getEventType (): Int getFeature [jvm] open override fun getFeature (p0: String ): Boolean getInputEncoding [jvm] open override fun getInputEncoding (): String getLineNumber [jvm] open override fun getLineNumber (): Int getName [jvm] open override fun getName (): String ? getNamespace [jvm] open override fun getNamespace (): String open override fun getNamespace (p0: String ): String getNamespaceCount [jvm] open override fun getNamespaceCount (p0: Int ): Int getNamespacePrefix [jvm] open override fun getNamespacePrefix (p0: Int ): String getNamespaceUri [jvm] open override fun getNamespaceUri (p0: Int ): String getPositionDescription [jvm] open override fun getPositionDescription (): String getPrefix [jvm] open override fun getPrefix (): String getProperty [jvm] open override fun getProperty (p0: String ): Any getText [jvm] open override fun getText (): String getTextCharacters [jvm] open override fun getTextCharacters (p0: IntArray ): CharArray isAttributeDefault [jvm] open override fun isAttributeDefault (p0: Int ): Boolean isEmptyElementTag [jvm] open override fun isEmptyElementTag (): Boolean isWhitespace [jvm] open override fun isWhitespace (): Boolean next [jvm] open operator override fun next (): Int nextTag [jvm] open override fun nextTag (): Int nextText [jvm] open override fun nextText (): String nextToken [jvm] open override fun nextToken (): Int require [jvm] open override fun require (p0: Int , p1: String , p2: String ) rootTag [jvm] abstract fun rootTag (): TagSnapshot setFeature [jvm] open override fun setFeature (p0: String , p1: Boolean ) setInput [jvm] open override fun setInput (p0: Reader ) open override fun setInput (p0: InputStream , p1: String ) setProperty [jvm] open override fun setProperty (p0: String , p1: Any ) skipSubTree [jvm] open fun skipSubTree ()","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/-in-memory-parser/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / InMemoryParser InMemoryParser \u00b6 [jvm]\\ fun InMemoryParser ()","title":" in memory parser"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/-in-memory-parser/#inmemoryparser","text":"[jvm]\\ fun InMemoryParser ()","title":"InMemoryParser"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-count/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / getAttributeCount getAttributeCount \u00b6 [jvm]\\ open override fun getAttributeCount (): Int","title":"Get attribute count"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-count/#getattributecount","text":"[jvm]\\ open override fun getAttributeCount (): Int","title":"getAttributeCount"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-name/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / getAttributeName getAttributeName \u00b6 [jvm]\\ open override fun getAttributeName (i: Int ): String ?","title":"Get attribute name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-name/#getattributename","text":"[jvm]\\ open override fun getAttributeName (i: Int ): String ?","title":"getAttributeName"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-namespace/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / getAttributeNamespace getAttributeNamespace \u00b6 [jvm]\\ open override fun getAttributeNamespace (i: Int ): String","title":"Get attribute namespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-namespace/#getattributenamespace","text":"[jvm]\\ open override fun getAttributeNamespace (i: Int ): String","title":"getAttributeNamespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-prefix/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / getAttributePrefix getAttributePrefix \u00b6 [jvm]\\ open override fun getAttributePrefix (i: Int ): String ?","title":"Get attribute prefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-prefix/#getattributeprefix","text":"[jvm]\\ open override fun getAttributePrefix (i: Int ): String ?","title":"getAttributePrefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-value/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / getAttributeValue getAttributeValue \u00b6 [jvm]\\ open override fun getAttributeValue (i: Int ): String ? open override fun getAttributeValue (namespace: String ?, name: String ?): String ?","title":"Get attribute value"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-value/#getattributevalue","text":"[jvm]\\ open override fun getAttributeValue (i: Int ): String ? open override fun getAttributeValue (namespace: String ?, name: String ?): String ?","title":"getAttributeValue"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-depth/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / getDepth getDepth \u00b6 [jvm]\\ open override fun getDepth (): Int","title":"Get depth"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-depth/#getdepth","text":"[jvm]\\ open override fun getDepth (): Int","title":"getDepth"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-name/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / getName getName \u00b6 [jvm]\\ open override fun getName (): String ?","title":"Get name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-name/#getname","text":"[jvm]\\ open override fun getName (): String ?","title":"getName"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/next/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / next next \u00b6 [jvm]\\ open operator override fun next (): Int","title":"Next"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/next/#next","text":"[jvm]\\ open operator override fun next (): Int","title":"next"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/root-tag/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / InMemoryParser / rootTag rootTag \u00b6 [jvm]\\ abstract fun rootTag (): TagSnapshot","title":"Root tag"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/root-tag/#roottag","text":"[jvm]\\ abstract fun rootTag (): TagSnapshot","title":"rootTag"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / ResourceParser ResourceParser \u00b6 [jvm]\\ class ResourceParser (inputStream: InputStream ) : KXmlParser An XML resource parser that creates a tree of TagSnapshot s Constructors \u00b6 ResourceParser [jvm] fun ResourceParser (inputStream: InputStream ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary createTagSnapshot [jvm] fun createTagSnapshot (): TagSnapshot defineEntityReplacementText [jvm] open override fun defineEntityReplacementText (p0: String , p1: String ) getAttributeCount [jvm] open override fun getAttributeCount (): Int getAttributeName [jvm] open override fun getAttributeName (p0: Int ): String getAttributeNamespace [jvm] open override fun getAttributeNamespace (p0: Int ): String getAttributePrefix [jvm] open override fun getAttributePrefix (p0: Int ): String getAttributeType [jvm] open override fun getAttributeType (p0: Int ): String getAttributeValue [jvm] open override fun getAttributeValue (p0: Int ): String open override fun getAttributeValue (p0: String , p1: String ): String getColumnNumber [jvm] open override fun getColumnNumber (): Int getDepth [jvm] open override fun getDepth (): Int getEventType [jvm] open override fun getEventType (): Int getFeature [jvm] open override fun getFeature (p0: String ): Boolean getInputEncoding [jvm] open override fun getInputEncoding (): String getLineNumber [jvm] open override fun getLineNumber (): Int getName [jvm] open override fun getName (): String getNamespace [jvm] open override fun getNamespace (): String open override fun getNamespace (p0: String ): String getNamespaceCount [jvm] open override fun getNamespaceCount (p0: Int ): Int getNamespacePrefix [jvm] open override fun getNamespacePrefix (p0: Int ): String getNamespaceUri [jvm] open override fun getNamespaceUri (p0: Int ): String getPositionDescription [jvm] open override fun getPositionDescription (): String getPrefix [jvm] open override fun getPrefix (): String getProperty [jvm] open override fun getProperty (p0: String ): Any getText [jvm] open override fun getText (): String getTextCharacters [jvm] open override fun getTextCharacters (p0: IntArray ): CharArray isAttributeDefault [jvm] open override fun isAttributeDefault (p0: Int ): Boolean isEmptyElementTag [jvm] open override fun isEmptyElementTag (): Boolean isWhitespace [jvm] open override fun isWhitespace (): Boolean next [jvm] open operator override fun next (): Int nextTag [jvm] open override fun nextTag (): Int nextText [jvm] open override fun nextText (): String nextToken [jvm] open override fun nextToken (): Int require [jvm] open override fun require (p0: Int , p1: String , p2: String ) setFeature [jvm] open override fun setFeature (p0: String , p1: Boolean ) setInput [jvm] open override fun setInput (p0: Reader ) open override fun setInput (p0: InputStream , p1: String ) setProperty [jvm] open override fun setProperty (p0: String , p1: Any ) skipSubTree [jvm] open fun skipSubTree ()","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#resourceparser","text":"[jvm]\\ class ResourceParser (inputStream: InputStream ) : KXmlParser An XML resource parser that creates a tree of TagSnapshot s","title":"ResourceParser"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#constructors","text":"ResourceParser [jvm] fun ResourceParser (inputStream: InputStream )","title":"Constructors"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#functions","text":"Name Summary createTagSnapshot [jvm] fun createTagSnapshot (): TagSnapshot defineEntityReplacementText [jvm] open override fun defineEntityReplacementText (p0: String , p1: String ) getAttributeCount [jvm] open override fun getAttributeCount (): Int getAttributeName [jvm] open override fun getAttributeName (p0: Int ): String getAttributeNamespace [jvm] open override fun getAttributeNamespace (p0: Int ): String getAttributePrefix [jvm] open override fun getAttributePrefix (p0: Int ): String getAttributeType [jvm] open override fun getAttributeType (p0: Int ): String getAttributeValue [jvm] open override fun getAttributeValue (p0: Int ): String open override fun getAttributeValue (p0: String , p1: String ): String getColumnNumber [jvm] open override fun getColumnNumber (): Int getDepth [jvm] open override fun getDepth (): Int getEventType [jvm] open override fun getEventType (): Int getFeature [jvm] open override fun getFeature (p0: String ): Boolean getInputEncoding [jvm] open override fun getInputEncoding (): String getLineNumber [jvm] open override fun getLineNumber (): Int getName [jvm] open override fun getName (): String getNamespace [jvm] open override fun getNamespace (): String open override fun getNamespace (p0: String ): String getNamespaceCount [jvm] open override fun getNamespaceCount (p0: Int ): Int getNamespacePrefix [jvm] open override fun getNamespacePrefix (p0: Int ): String getNamespaceUri [jvm] open override fun getNamespaceUri (p0: Int ): String getPositionDescription [jvm] open override fun getPositionDescription (): String getPrefix [jvm] open override fun getPrefix (): String getProperty [jvm] open override fun getProperty (p0: String ): Any getText [jvm] open override fun getText (): String getTextCharacters [jvm] open override fun getTextCharacters (p0: IntArray ): CharArray isAttributeDefault [jvm] open override fun isAttributeDefault (p0: Int ): Boolean isEmptyElementTag [jvm] open override fun isEmptyElementTag (): Boolean isWhitespace [jvm] open override fun isWhitespace (): Boolean next [jvm] open operator override fun next (): Int nextTag [jvm] open override fun nextTag (): Int nextText [jvm] open override fun nextText (): String nextToken [jvm] open override fun nextToken (): Int require [jvm] open override fun require (p0: Int , p1: String , p2: String ) setFeature [jvm] open override fun setFeature (p0: String , p1: Boolean ) setInput [jvm] open override fun setInput (p0: Reader ) open override fun setInput (p0: InputStream , p1: String ) setProperty [jvm] open override fun setProperty (p0: String , p1: Any ) skipSubTree [jvm] open fun skipSubTree ()","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-resource-parser/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / ResourceParser / ResourceParser ResourceParser \u00b6 [jvm]\\ fun ResourceParser (inputStream: InputStream )","title":" resource parser"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-resource-parser/#resourceparser","text":"[jvm]\\ fun ResourceParser (inputStream: InputStream )","title":"ResourceParser"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/create-tag-snapshot/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / ResourceParser / createTagSnapshot createTagSnapshot \u00b6 [jvm]\\ fun createTagSnapshot (): TagSnapshot","title":"Create tag snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/create-tag-snapshot/#createtagsnapshot","text":"[jvm]\\ fun createTagSnapshot (): TagSnapshot","title":"createTagSnapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-companion/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / ResourceParser / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot TagSnapshot \u00b6 [jvm]\\ data class TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/TagSnapshot.java A snapshot of the state of an xml tag. Used by the rendering architecture to be able to hold a consistent view of the layout files across a long rendering operation without holding read locks, as well as to for example let the property sheet evaluate and paint the values of properties as they were at the time of rendering, not as they are at the current instant. Constructors \u00b6 TagSnapshot [jvm] fun TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean = false) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary printFormatted [jvm] fun printFormatted (): String Properties \u00b6 Name Summary attributes [jvm] val attributes : List < AttributeSnapshot > children [jvm] val children : List < TagSnapshot > hasDeclaredAaptAttrs [jvm] val hasDeclaredAaptAttrs : Boolean = false name [jvm] val name : String namespace [jvm] val namespace : String next [jvm] var next : TagSnapshot ? = null prefix [jvm] val prefix : String ?","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#tagsnapshot","text":"[jvm]\\ data class TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean ) Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/TagSnapshot.java A snapshot of the state of an xml tag. Used by the rendering architecture to be able to hold a consistent view of the layout files across a long rendering operation without holding read locks, as well as to for example let the property sheet evaluate and paint the values of properties as they were at the time of rendering, not as they are at the current instant.","title":"TagSnapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#constructors","text":"TagSnapshot [jvm] fun TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean = false)","title":"Constructors"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#functions","text":"Name Summary printFormatted [jvm] fun printFormatted (): String","title":"Functions"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#properties","text":"Name Summary attributes [jvm] val attributes : List < AttributeSnapshot > children [jvm] val children : List < TagSnapshot > hasDeclaredAaptAttrs [jvm] val hasDeclaredAaptAttrs : Boolean = false name [jvm] val name : String namespace [jvm] val namespace : String next [jvm] var next : TagSnapshot ? = null prefix [jvm] val prefix : String ?","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-tag-snapshot/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / TagSnapshot TagSnapshot \u00b6 [jvm]\\ fun TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean = false)","title":" tag snapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-tag-snapshot/#tagsnapshot","text":"[jvm]\\ fun TagSnapshot (name: String , namespace: String , prefix: String ?, attributes: List < AttributeSnapshot >, children: List < TagSnapshot >, hasDeclaredAaptAttrs: Boolean = false)","title":"TagSnapshot"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/attributes/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / attributes attributes \u00b6 [jvm]\\ val attributes : List < AttributeSnapshot >","title":"Attributes"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/attributes/#attributes","text":"[jvm]\\ val attributes : List < AttributeSnapshot >","title":"attributes"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/children/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / children children \u00b6 [jvm]\\ val children : List < TagSnapshot >","title":"Children"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/children/#children","text":"[jvm]\\ val children : List < TagSnapshot >","title":"children"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/has-declared-aapt-attrs/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / hasDeclaredAaptAttrs hasDeclaredAaptAttrs \u00b6 [jvm]\\ val hasDeclaredAaptAttrs : Boolean = false","title":"Has declared aapt attrs"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/has-declared-aapt-attrs/#hasdeclaredaaptattrs","text":"[jvm]\\ val hasDeclaredAaptAttrs : Boolean = false","title":"hasDeclaredAaptAttrs"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/name/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / name name \u00b6 [jvm]\\ val name : String","title":"Name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/namespace/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / namespace namespace \u00b6 [jvm]\\ val namespace : String","title":"Namespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/namespace/#namespace","text":"[jvm]\\ val namespace : String","title":"namespace"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/next/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / next next \u00b6 [jvm]\\ var next : TagSnapshot ? = null","title":"Next"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/next/#next","text":"[jvm]\\ var next : TagSnapshot ? = null","title":"next"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/prefix/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / prefix prefix \u00b6 [jvm]\\ val prefix : String ?","title":"Prefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/prefix/#prefix","text":"[jvm]\\ val prefix : String ?","title":"prefix"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/print-formatted/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / printFormatted printFormatted \u00b6 [jvm]\\ fun printFormatted (): String","title":"Print formatted"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/print-formatted/#printformatted","text":"[jvm]\\ fun printFormatted (): String","title":"printFormatted"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary indent [jvm] var indent : Int","title":"Index"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/#properties","text":"Name Summary indent [jvm] var indent : Int","title":"Properties"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/indent/","text":"// paparazzi / app.cash.paparazzi.internal.parsers / TagSnapshot / Companion / indent indent \u00b6 [jvm]\\ var indent : Int","title":"Indent"},{"location":"0.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/indent/#indent","text":"[jvm]\\ var indent : Int","title":"indent"}]}