{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Paparazzi \u00b6 An Android library to render your application screens without a physical device or emulator. class LaunchViewTest { @get : Rule val paparazzi = Paparazzi ( deviceConfig = PIXEL_5 , theme = \"android:Theme.Material.Light.NoActionBar\" // ...see docs for more options ) @Test fun launchView () { val view = paparazzi . inflate < LaunchView >( R . layout . launch ) // or... // val view = LaunchView(paparazzi.context) view . setModel ( LaunchModel ( title = \"paparazzi\" )) paparazzi . snapshot ( view ) } @Test fun launchComposable () { paparazzi . snapshot { MyComposable () } } } Tasks \u00b6 $ ./gradlew sample:testDebug Runs tests and generates an HTML report at sample/build/reports/paparazzi/ showing all test runs and snapshots. $ ./gradlew sample:recordPaparazziDebug Saves snapshots as golden values to a predefined source-controlled location (defaults to src/test/snapshots ). $ ./gradlew sample:verifyPaparazziDebug Runs tests and verifies against previously-recorded golden values. Failures generate diffs at sample/out/failures . For more examples, check out the sample project. Git LFS \u00b6 It is recommended you use Git LFS to store your snapshots. Here\u2019s a quick setup: $ brew install git-lfs $ git config core.hooksPath # optional, confirm where your git hooks will be installed $ git lfs install --local $ git lfs track \"**/snapshots/**/*.png\" $ git add .gitattributes On CI, you might set up something like: $HOOKS_DIR/pre-receive # compares files that match .gitattributes filter to those actually tracked by git-lfs diff < ( git ls-files ':(attr:filter=lfs)' | sort ) < ( git lfs ls-files -n | sort ) >/dev/null ret = $? if [[ $ret -ne 0 ]] ; then echo > & 2 \"This remote has detected files committed without using Git LFS. Run 'brew install git-lfs && git lfs install' to install it and re-commit your files.\" ; exit 1 ; fi your_build_script.sh if [[ is running snapshot tests ]] ; then # fail fast if files not checked in using git lfs \" $HOOKS_DIR \" /pre-receive git lfs install --local git lfs pull fi Jetifier \u00b6 If using Jetifier to migrate off Support libraries, add the following to your gradle.properties to exclude bundled Android dependencies. android.jetifier.ignorelist=android-base-common,common Releases \u00b6 Our change log has release history. Using plugin application: buildscript { repositories { mavenCentral () google () } dependencies { classpath 'app.cash.paparazzi:paparazzi-gradle-plugin:1.0.0' } } apply plugin: 'app.cash.paparazzi' Using the plugins DSL: plugins { id 'app.cash.paparazzi' version '1.0.0' } Snapshots of the development version are available in Sonatype\u2019s snapshots repository . repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } License \u00b6 Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#paparazzi","text":"An Android library to render your application screens without a physical device or emulator. class LaunchViewTest { @get : Rule val paparazzi = Paparazzi ( deviceConfig = PIXEL_5 , theme = \"android:Theme.Material.Light.NoActionBar\" // ...see docs for more options ) @Test fun launchView () { val view = paparazzi . inflate < LaunchView >( R . layout . launch ) // or... // val view = LaunchView(paparazzi.context) view . setModel ( LaunchModel ( title = \"paparazzi\" )) paparazzi . snapshot ( view ) } @Test fun launchComposable () { paparazzi . snapshot { MyComposable () } } }","title":"Paparazzi"},{"location":"#tasks","text":"$ ./gradlew sample:testDebug Runs tests and generates an HTML report at sample/build/reports/paparazzi/ showing all test runs and snapshots. $ ./gradlew sample:recordPaparazziDebug Saves snapshots as golden values to a predefined source-controlled location (defaults to src/test/snapshots ). $ ./gradlew sample:verifyPaparazziDebug Runs tests and verifies against previously-recorded golden values. Failures generate diffs at sample/out/failures . For more examples, check out the sample project.","title":"Tasks"},{"location":"#git-lfs","text":"It is recommended you use Git LFS to store your snapshots. Here\u2019s a quick setup: $ brew install git-lfs $ git config core.hooksPath # optional, confirm where your git hooks will be installed $ git lfs install --local $ git lfs track \"**/snapshots/**/*.png\" $ git add .gitattributes On CI, you might set up something like: $HOOKS_DIR/pre-receive # compares files that match .gitattributes filter to those actually tracked by git-lfs diff < ( git ls-files ':(attr:filter=lfs)' | sort ) < ( git lfs ls-files -n | sort ) >/dev/null ret = $? if [[ $ret -ne 0 ]] ; then echo > & 2 \"This remote has detected files committed without using Git LFS. Run 'brew install git-lfs && git lfs install' to install it and re-commit your files.\" ; exit 1 ; fi your_build_script.sh if [[ is running snapshot tests ]] ; then # fail fast if files not checked in using git lfs \" $HOOKS_DIR \" /pre-receive git lfs install --local git lfs pull fi","title":"Git LFS"},{"location":"#jetifier","text":"If using Jetifier to migrate off Support libraries, add the following to your gradle.properties to exclude bundled Android dependencies. android.jetifier.ignorelist=android-base-common,common","title":"Jetifier"},{"location":"#releases","text":"Our change log has release history. Using plugin application: buildscript { repositories { mavenCentral () google () } dependencies { classpath 'app.cash.paparazzi:paparazzi-gradle-plugin:1.0.0' } } apply plugin: 'app.cash.paparazzi' Using the plugins DSL: plugins { id 'app.cash.paparazzi' version '1.0.0' } Snapshots of the development version are available in Sonatype\u2019s snapshots repository . repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } }","title":"Releases"},{"location":"#license","text":"Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 1.0.0 \u00b6 2022-06-03 New \u00b6 Support for Composable snapshots Migrate Paparazzi to layoutlib Bumblebee 2021.1.1 for better rendering and API 31 support Update Paparazzi configuration via new unsafeUpdateConfig method instead of snapshot / gif Cache Paparazzi bootstrap logic for better performance per test suite Surface internally thrown exceptions from layoutlib Throw a more helpful exception if Android platform is missing Bump default compileSdk to API 31 Compose 1.1.1 Kotlin 1.6.10 [Gradle Plugin] Gradle 7.4.2 [Gradle Plugin] Android Gradle Plugin 7.1.2 Fixed \u00b6 Prepend paths with file:// for clickable error output in IDE Update default SDK path on Linux Fix accessibility test logic to avoid unnecessary coloring changes on updated view ids Fixes crash when using InputMethodManager to show/hide keyboard Temporarily work around Compose runtime memory leaks [Gradle Plugin] Prefer namespace DSL declaration over manifest package declaration [Gradle Plugin] Publish plugin marker on snapshot builds [Gradle Plugin] Exclude androidTest sourceSets during paparazzi runs Kudos to @luis-cortes, @nak5ive, @alexvanyo, @gamepro65 and others for contributions this release! Version 0.9.3 \u00b6 2022-01-20 Fixed \u00b6 Load the correct mac arm artifact on M1 machines Generate fake View.id for consistent colors for accessibility entries when views are modified Kudos to @geoff-powell, @nicbell for their contributions this release! Version 0.9.2 (Please ignore this release) \u00b6 2022-01-20 Version 0.9.1 \u00b6 2022-01-14 Fixed \u00b6 Download mac arm artifact if on M1 machines Support for assets from transitive dependencies Add fix for ClassNotFoundException when using nonTransitiveRClass Update RELEASING notes to publish plugin marker artifact Avoid NPE in AccessibilityRenderExtension when layout params are not supplied Use View.id to generate consistent colors for accessibility entries when views are modified Kudos to @luis-cortes, @geoff-powell, @autonomousapps and @LuK1709 for their contributions this release! Version 0.9.0 \u00b6 2021-11-22 New \u00b6 Migrate Paparazzi to layoutlib Arctic Fox 2020.3.1, providing native support for M1 machines Migrate Paparazzi to layoutlib 4.2, unlocking future Compose support Add support for projects enabling non-transitive resources RenderExtension now visits view hierarchy pre-rendering instead of layering bitmaps post-rendering Fail-fast when Bridge.init fails, usually due to native crash Expose RenderingMode as a configurable option Bump default compileSdk to API 30 Improve Java-interoperability experience Kotlin 1.5.31 Fixed \u00b6 Don\u2019t require Android plugin to be declared before Paparazzi plugin Clear AnimationHandler leak after each snapshot Don\u2019t generate empty mov files on snapshot failure Add Kotlin platform bom to prevent classpath conflicts during test builds Use correct default Android SDK path on Windows Use platform-agnostic file paths in Gradle artifacts to support remote caching across platforms Use platform-agnostic file paths in Javascript for web page support on Windows Fix font scaling issue in AccessibilityRenderExtension by using bundled font Kudos to @luis-cortes, @geoff-powell and @TWiStErRob for their contributions this release! Version 0.8.0 \u00b6 2021-10-07 New \u00b6 Migrate Paparazzi to use native layoutlib for better rendering and API 30 support Add new extension for rendering accessibility metadata Add support for fontScale in DeviceConfig Add device config for Pixel 5 Add tasks to Gradle task verification group Migrate publishing to gradle-maven-publish-plugin Migrate builds to Github Actions Migrate sample test from Burst to TestParameterInjector Kotlin 1.5.21 [Gradle Plugin] Support for configuration caching [Gradle Plugin] Gradle 7.2 Fixed \u00b6 Add method interceptor for matrix multiplication operations Don\u2019t swallow FileNotFoundExceptions when overridden platform dir doesn\u2019t exist [Gradle Plugin] Fix remote caching bug by referencing relative, not absolute, paths in intermediate resources file. Version 0.7.1 \u00b6 2021-05-17 New \u00b6 [Gradle Plugin] Support the \u2013tests option for record/verify tasks Fixed \u00b6 [Gradle Plugin] Defer task configuration until created Version 0.7.0 \u00b6 2021-02-26 New \u00b6 Kotlin 1.4.30 Add support for inline complex XML resources Enable Burst support Expose maximum percentage difference in image verification as a setting Render extension api to add extra information to snapshots Allow selection of night mode in DeviceConfig [Gradle Plugin] Gradle 6.8.3 [Gradle Plugin] Creating an umbrella task to execute on all variants Fixed \u00b6 Properly execute Choreographer.doFrame after view has been laid out Fix broken text appearances when style resource names contain periods Fix ability to access asset files Use target-sdk to simulate device when available Always write screenshots to disk in record mode Don\u2019t crash when running on Java 12+ [Gradle Plugin] Force test re-runs when a resource or asset has changed [Gradle Plugin] Force test re-runs if generated report or snapshot dirs are deleted Version 0.6.0 \u00b6 2020-10-02 As of this release, consumers must build on Java 11 environments. New \u00b6 Point to a more recent version of layoutlib that runs on Android Q and builds with Java 11. Refactor Paparazzi to better support non-Gradle builds Added device configs for Pixel 4 series Version 0.5.2 \u00b6 2020-09-17 Fixed \u00b6 [Gradle Plugin] Fixed record and verify tasks in multi-module projects. Version 0.5.1 \u00b6 2020-09-17 Fixed \u00b6 [Gradle Plugin] Fixed race condition in record and verify tasks. Version 0.5.0 \u00b6 2020-09-16 Initial release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-100","text":"2022-06-03","title":"Version 1.0.0"},{"location":"changelog/#new","text":"Support for Composable snapshots Migrate Paparazzi to layoutlib Bumblebee 2021.1.1 for better rendering and API 31 support Update Paparazzi configuration via new unsafeUpdateConfig method instead of snapshot / gif Cache Paparazzi bootstrap logic for better performance per test suite Surface internally thrown exceptions from layoutlib Throw a more helpful exception if Android platform is missing Bump default compileSdk to API 31 Compose 1.1.1 Kotlin 1.6.10 [Gradle Plugin] Gradle 7.4.2 [Gradle Plugin] Android Gradle Plugin 7.1.2","title":"New"},{"location":"changelog/#fixed","text":"Prepend paths with file:// for clickable error output in IDE Update default SDK path on Linux Fix accessibility test logic to avoid unnecessary coloring changes on updated view ids Fixes crash when using InputMethodManager to show/hide keyboard Temporarily work around Compose runtime memory leaks [Gradle Plugin] Prefer namespace DSL declaration over manifest package declaration [Gradle Plugin] Publish plugin marker on snapshot builds [Gradle Plugin] Exclude androidTest sourceSets during paparazzi runs Kudos to @luis-cortes, @nak5ive, @alexvanyo, @gamepro65 and others for contributions this release!","title":"Fixed"},{"location":"changelog/#version-093","text":"2022-01-20","title":"Version 0.9.3"},{"location":"changelog/#fixed_1","text":"Load the correct mac arm artifact on M1 machines Generate fake View.id for consistent colors for accessibility entries when views are modified Kudos to @geoff-powell, @nicbell for their contributions this release!","title":"Fixed"},{"location":"changelog/#version-092-please-ignore-this-release","text":"2022-01-20","title":"Version 0.9.2 (Please ignore this release)"},{"location":"changelog/#version-091","text":"2022-01-14","title":"Version 0.9.1"},{"location":"changelog/#fixed_2","text":"Download mac arm artifact if on M1 machines Support for assets from transitive dependencies Add fix for ClassNotFoundException when using nonTransitiveRClass Update RELEASING notes to publish plugin marker artifact Avoid NPE in AccessibilityRenderExtension when layout params are not supplied Use View.id to generate consistent colors for accessibility entries when views are modified Kudos to @luis-cortes, @geoff-powell, @autonomousapps and @LuK1709 for their contributions this release!","title":"Fixed"},{"location":"changelog/#version-090","text":"2021-11-22","title":"Version 0.9.0"},{"location":"changelog/#new_1","text":"Migrate Paparazzi to layoutlib Arctic Fox 2020.3.1, providing native support for M1 machines Migrate Paparazzi to layoutlib 4.2, unlocking future Compose support Add support for projects enabling non-transitive resources RenderExtension now visits view hierarchy pre-rendering instead of layering bitmaps post-rendering Fail-fast when Bridge.init fails, usually due to native crash Expose RenderingMode as a configurable option Bump default compileSdk to API 30 Improve Java-interoperability experience Kotlin 1.5.31","title":"New"},{"location":"changelog/#fixed_3","text":"Don\u2019t require Android plugin to be declared before Paparazzi plugin Clear AnimationHandler leak after each snapshot Don\u2019t generate empty mov files on snapshot failure Add Kotlin platform bom to prevent classpath conflicts during test builds Use correct default Android SDK path on Windows Use platform-agnostic file paths in Gradle artifacts to support remote caching across platforms Use platform-agnostic file paths in Javascript for web page support on Windows Fix font scaling issue in AccessibilityRenderExtension by using bundled font Kudos to @luis-cortes, @geoff-powell and @TWiStErRob for their contributions this release!","title":"Fixed"},{"location":"changelog/#version-080","text":"2021-10-07","title":"Version 0.8.0"},{"location":"changelog/#new_2","text":"Migrate Paparazzi to use native layoutlib for better rendering and API 30 support Add new extension for rendering accessibility metadata Add support for fontScale in DeviceConfig Add device config for Pixel 5 Add tasks to Gradle task verification group Migrate publishing to gradle-maven-publish-plugin Migrate builds to Github Actions Migrate sample test from Burst to TestParameterInjector Kotlin 1.5.21 [Gradle Plugin] Support for configuration caching [Gradle Plugin] Gradle 7.2","title":"New"},{"location":"changelog/#fixed_4","text":"Add method interceptor for matrix multiplication operations Don\u2019t swallow FileNotFoundExceptions when overridden platform dir doesn\u2019t exist [Gradle Plugin] Fix remote caching bug by referencing relative, not absolute, paths in intermediate resources file.","title":"Fixed"},{"location":"changelog/#version-071","text":"2021-05-17","title":"Version 0.7.1"},{"location":"changelog/#new_3","text":"[Gradle Plugin] Support the \u2013tests option for record/verify tasks","title":"New"},{"location":"changelog/#fixed_5","text":"[Gradle Plugin] Defer task configuration until created","title":"Fixed"},{"location":"changelog/#version-070","text":"2021-02-26","title":"Version 0.7.0"},{"location":"changelog/#new_4","text":"Kotlin 1.4.30 Add support for inline complex XML resources Enable Burst support Expose maximum percentage difference in image verification as a setting Render extension api to add extra information to snapshots Allow selection of night mode in DeviceConfig [Gradle Plugin] Gradle 6.8.3 [Gradle Plugin] Creating an umbrella task to execute on all variants","title":"New"},{"location":"changelog/#fixed_6","text":"Properly execute Choreographer.doFrame after view has been laid out Fix broken text appearances when style resource names contain periods Fix ability to access asset files Use target-sdk to simulate device when available Always write screenshots to disk in record mode Don\u2019t crash when running on Java 12+ [Gradle Plugin] Force test re-runs when a resource or asset has changed [Gradle Plugin] Force test re-runs if generated report or snapshot dirs are deleted","title":"Fixed"},{"location":"changelog/#version-060","text":"2020-10-02 As of this release, consumers must build on Java 11 environments.","title":"Version 0.6.0"},{"location":"changelog/#new_5","text":"Point to a more recent version of layoutlib that runs on Android Q and builds with Java 11. Refactor Paparazzi to better support non-Gradle builds Added device configs for Pixel 4 series","title":"New"},{"location":"changelog/#version-052","text":"2020-09-17","title":"Version 0.5.2"},{"location":"changelog/#fixed_7","text":"[Gradle Plugin] Fixed record and verify tasks in multi-module projects.","title":"Fixed"},{"location":"changelog/#version-051","text":"2020-09-17","title":"Version 0.5.1"},{"location":"changelog/#fixed_8","text":"[Gradle Plugin] Fixed race condition in record and verify tasks.","title":"Fixed"},{"location":"changelog/#version-050","text":"2020-09-16 Initial release.","title":"Version 0.5.0"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"releasing/","text":"Releasing \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.paparazzi:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.paparazzi:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags Prerequisites \u00b6 In ~/.gradle/gradle.properties , set the following: mavenCentralUsername - Sonatype username for releasing to app.cash . mavenCentralPassword - Sonatype password for releasing to app.cash .","title":"Releasing"},{"location":"releasing/#releasing","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.paparazzi:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.paparazzi:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Releasing"},{"location":"releasing/#prerequisites","text":"In ~/.gradle/gradle.properties , set the following: mavenCentralUsername - Sonatype username for releasing to app.cash . mavenCentralPassword - Sonatype password for releasing to app.cash .","title":"Prerequisites"}]}