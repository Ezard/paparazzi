apply plugin: 'com.github.ben-manes.versions'

buildscript {
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
    //mavenLocal()
  }

  dependencies {
    classpath libs.plugin.kotlin
    classpath libs.plugin.android
    classpath libs.plugin.versions
    classpath libs.plugin.spotless

    // Normally you would declare a version here, but we use dependency substitution in
    // settings.gradle to use the version built from inside the repo.
    classpath 'app.cash.paparazzi:paparazzi-gradle-plugin'
  }
}

gradleEnterprise {
  buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"
    // Capturing task input files increases the amount of data transmitted to the build scan server
    // at the end of the build. If the network connection to the build scan server is poor,
    // it may increase the time required to transmit. Disable the setting below if it has a
    // noticeable effect on build scan upload speed, and subsequently build speed, on CI.
    captureTaskInputFiles = true
    uploadInBackground = false

    publishAlwaysIf isCi()
  }
}

private static boolean isCi() { return System.getenv('GITHUB_ACTIONS') != null }

subprojects {
  repositories {
    mavenCentral()
    google()
    //mavenLocal()
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events "failed"
      exceptionFormat "full"
      showExceptions true
      showStackTraces true
      showCauses true
    }
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = libs.versions.javaTarget.get()
    targetCompatibility = libs.versions.javaTarget.get()
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach {
    kotlinOptions {
      jvmTarget = libs.versions.javaTarget.get()
    }
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    kotlin {
      target("src/**/*.kt")
      // ktlint doesn't honour .editorconfig yet: https://github.com/diffplug/spotless/issues/142
      ktlint(libs.versions.ktlint.get()).editorConfigOverride([
        'insert_final_newline': 'true',
        'end_of_line': 'lf',
        'charset': 'utf-8',
        'indent_size': '2',
        'trim_trailing_whitespace': 'true',
        'ij_kotlin_imports_layout': '*,java.**,javax.**,kotlin.**,kotlinx.**,^'
      ])
    }
  }
}

tasks.register("clean", Delete).configure {
  delete rootProject.buildDir
}

tasks.named("wrapper").configure {
  distributionType = Wrapper.DistributionType.ALL
}
